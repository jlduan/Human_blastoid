[
  {
    "objectID": "analyze_blastoids.html#preparation",
    "href": "analyze_blastoids.html#preparation",
    "title": "Single Cell Transcriptomes of Human Blastoids",
    "section": "Preparation",
    "text": "Preparation\nFunctions\n\n\n\nLoad required packages.\n\nlibrary(tidyverse)\nlibrary(Matrix)\nlibrary(patchwork)\nlibrary(extrafont)\n\n\nsource(\n    file = file.path(\n        SCRIPT_DIR,\n        \"utilities.R\"\n    )\n)\n\nload_matrix <- function(x) {\n    matrix_readcount_use <- scipy.sparse$load_npz(\n        file.path(x, \"matrix_readcount.npz\")\n    )\n    colnames(matrix_readcount_use) <- np$load(\n        file.path(x, \"matrix_readcount_barcodes.npy\")\n    )\n    rownames(matrix_readcount_use) <- np$load(\n        file.path(x, \"matrix_readcount_features.npy\")\n    )\n\n    return(matrix_readcount_use)\n}\n\nPython env\n\nnp <- reticulate::import(\"numpy\", convert = TRUE)\nscipy.sparse <- reticulate::import(module = \"scipy.sparse\", convert = TRUE)\n\n\nreticulate::py_config()\n\npython:         /Users/jialei/.pyenv/shims/python\nlibpython:      /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/libpython3.9.dylib\npythonhome:     /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10:/Users/jialei/.pyenv/versions/mambaforge-4.10.3-10\nversion:        3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:00:33)  [Clang 13.0.1 ]\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\nnumpy_version:  1.22.4\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n\nNOTE: Python version was forced by RETICULATE_PYTHON\n\n\nMatrix\n\nPROJECT_DIR <- \"/Users/jialei/Dropbox/Data/Projects/UTSW/Human_blastoid\"\n\n\nMATRIX_DIR <- list(\n    \"github/data/matrices/LW36\",\n    \"github/data/matrices/LW49_LW50_LW51_LW52\",\n    \"github/data/matrices/LW58_LW59\",\n    \"github/data/matrices/LW60_LW61\",\n    \"raw/public/PRJEB11202/reformatted_matrix\"\n)\n\nmatrix_readcount_use <- purrr::map(MATRIX_DIR, \\(x) {\n    load_matrix(file.path(PROJECT_DIR, x))\n}) |>\n    purrr::reduce(cbind)\n\n# clean up\nrm(MATRIX_DIR)\n\nEmbedding\n\nEMBEDDING_FILE <- \"embedding.csv.gz\"\n\nembedding <- read_csv(\n    file = file.path(\n        PROJECT_DIR,\n        \"github\",\n        \"data\",\n        EMBEDDING_FILE\n    )\n)\n\n# clean up\nrm(EMBEDDING_FILE)\n\nMetadata\n\ncell_metadata_PRJEB11202 <- read_delim(\n    file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJEB11202/\",\n        \"E-MTAB-3929.sdrf.tsv\"\n    ),\n    delim = \"\\t\"\n) |>\n    dplyr::select(\n        `Comment[ENA_SAMPLE]`,\n        `Comment[ENA_RUN]`,\n        `Characteristics[developmental stage]`,\n        `Characteristics[inferred lineage]`\n    ) |>\n    dplyr::rename(\n        cell = `Comment[ENA_SAMPLE]`,\n        run = `Comment[ENA_RUN]`,\n        developmental_stage = `Characteristics[developmental stage]`,\n        lineage = `Characteristics[inferred lineage]`\n    ) |>\n    dplyr::mutate(\n        developmental_stage = str_replace(\n            string = developmental_stage,\n            pattern = \"embryonic day \",\n            replacement = \"E\"\n        ),\n        lineage = case_when(\n            lineage == \"epiblast\" ~ \"EPI\",\n            lineage == \"primitive endoderm\" ~ \"HYP\",\n            lineage == \"trophectoderm\" ~ \"TE\",\n            lineage == \"not applicable\" ~ \"Pre-lineage\"\n        )\n    )\n\nembedding <- embedding |>\n    dplyr::left_join(\n        cell_metadata_PRJEB11202\n    ) |>\n    dplyr::mutate(\n        developmental_stage = factor(developmental_stage),\n        lineage = factor(lineage)\n    )\n\n\n\n\n\n\n\n\nCheck memory usage.\n\nwalk(list(matrix_readcount_use, embedding), \\(x) {\n    print(object.size(x), units = \"auto\", standard = \"SI\")\n})\n\n496.5 MB\n1.6 MB"
  },
  {
    "objectID": "analyze_blastoids.html#blastoids-globally-resemble-blastocysts",
    "href": "analyze_blastoids.html#blastoids-globally-resemble-blastocysts",
    "title": "Single Cell Transcriptomes of Human Blastoids",
    "section": "Blastoids globally resemble blastocysts",
    "text": "Blastoids globally resemble blastocysts\nEmbedding visualization\n\nEMBEDDING_TITLE_PREFIX <- \"UMAP\"\n\nx_column <- \"x_umap\"\ny_column <- \"y_umap\"\n\nGEOM_POINT_SIZE <- 0.6\nRASTERISED <- FALSE\n\nClustering & batch & UMI\n\np_embedding_louvain <- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$louvain |> as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Cluster\"),\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_batch <- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$batch |> as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Batch\"),\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_UMI <- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = log10(Matrix::colSums(matrix_readcount_use[, embedding$cell])),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; UMI\"),\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\nselected_feature <- \"ENSG00000204531_POU5F1\"\np_embedding_POU5F1 <- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = log10(\n        calc_cpm(matrix_readcount_use[, embedding$cell])\n        [selected_feature, ] + 1\n    ),\n    label = glue::glue(\n        \"{EMBEDDING_TITLE_PREFIX}; \",\n        \"{selected_feature |> stringr::str_remove(pattern = \\\"^E.+_\\\")}\"\n    ),\n    color_legend = TRUE,\n    sort_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE,\n    na_value = \"grey80\"\n) +\n    theme_customized_embedding()\n\n\nembedding |>\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] > 0),\n    ) |>\n    dplyr::group_by(louvain) |>\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |>\n    gt::gt() |>\n    gt::data_color(\n        columns = c(median_umis),\n        colors = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = c(1000, 32000)\n        )\n    ) |>\n    gt::summary_rows(\n        columns = c(louvain),\n        fns = list(\n            Count = ~ n()\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::tab_header(\n        title = gt::md(\"**Blastoid Clustering**; Cluster\")\n    )\n\n\n\n\n\n\n\nBlastoid Clustering; Cluster\n    \n\n\n      louvain\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\n0\n1533\n11534.0\n3074.0\n\n\n\n1\n1113\n18092.0\n3612.0\n\n\n\n2\n1079\n11308.0\n2940.0\n\n\n\n3\n996\n14659.0\n3220.5\n\n\n\n4\n924\n1108.5\n627.0\n\n\n\n5\n725\n6915.0\n1981.0\n\n\n\n6\n710\n9711.5\n2158.0\n\n\n\n7\n672\n10544.0\n2791.5\n\n\n\n8\n649\n11961.0\n2905.0\n\n\n\n9\n570\n19201.0\n3656.0\n\n\n\n10\n410\n23705.5\n4208.5\n\n\n\n11\n366\n13910.5\n3355.5\n\n\n\n12\n365\n16942.0\n3437.0\n\n\n\n13\n275\n8010.0\n2455.0\n\n\n\n14\n249\n31950.0\n4954.0\n\n\n\n15\n202\n8217.0\n2452.0\n\n\n\n16\n138\n10242.5\n2852.5\n\n\n\n17\n120\n17426.0\n3400.0\n\n\n\n18\n86\n18158.0\n3853.5\n\n\nCount\n19\n—\n—\n—\n\n\nMean\n—\n—\n13,873\n3,049\n\n\nSum\n—\n11,182\n—\n—\n\n\n\n\n\n\n\nembedding |>\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] > 0),\n    ) |>\n    dplyr::group_by(batch) |>\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |>\n    dplyr::mutate(\n        sample = dplyr::case_when(\n            batch == \"PRJEB11202\" ~ \"Petropoulos et al., 2016\",\n            batch == \"LW60\" ~ \"Blastoid, D9; HT; 5i/L/A\",\n            batch == \"LW61\" ~ \"Blastoid, D9; HT; 5i/L/A\"\n        )\n    ) |>\n    dplyr::select(\n        sample, dplyr::everything()\n    ) |>\n    gt::gt() |>\n    gt::data_color(\n        columns = c(median_umis),\n        colors = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = c(7000, 1600000)\n        )\n    ) |>\n    gt::summary_rows(\n        columns = c(sample:batch),\n        fns = list(\n            Count = ~ n()\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::tab_header(\n        title = gt::md(\"**Blastoid Clustering**; Batch\")\n    )\n\n\n\n\n\n\n\nBlastoid Clustering; Batch\n    \n\n\n      sample\n      batch\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\nBlastoid, D9; HT; 5i/L/A\nLW60\n4497\n14421\n3337\n\n\n\nBlastoid, D9; HT; 5i/L/A\nLW61\n5156\n7625\n2185\n\n\n\nPetropoulos et al., 2016\nPRJEB11202\n1529\n1551093\n10305\n\n\nCount\n3\n3\n—\n—\n—\n\n\nMean\n—\n—\n—\n524,380\n5,276\n\n\nSum\n—\n—\n11,182\n—\n—\n\n\n\n\n\n\n\npurrr::reduce(list(\n    p_embedding_louvain,\n    p_embedding_batch,\n    p_embedding_UMI,\n    p_embedding_POU5F1\n), `+`) +\n    patchwork::plot_layout(ncol = 2) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nDevelopmental stages\n\nSalmon: highlighted group of cells; Light grey: cells belonging to this dataset but not the highlighted group; Dark grey: cells belonging to other datasets.\n\npurrr::map(levels(embedding$developmental_stage), \\(x) {\n    plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = as.integer(embedding$developmental_stage == x) |> as.factor(),\n        label = glue::glue(\n            \"{EMBEDDING_TITLE_PREFIX}; Petropoulos et al., 2016, {x}\"\n        ),\n        color_legend = FALSE,\n        sort_values = TRUE,\n        geom_point_size = GEOM_POINT_SIZE,\n    ) +\n        theme_customized_embedding() +\n        ggplot2::scale_color_manual(values = c(\"grey70\", \"salmon\"))\n}) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 3, byrow = TRUE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nPolishing\n\ncolor_palette_cluster <- c(\n    \"0\" = \"#8DD3C7\",\n    \"1\" = \"#9EDAE5FF\",\n    \"2\" = \"#BEBADA\",\n    \"3\" = \"#FB8072\",\n    \"4\" = \"#80B1D3\",\n    \"5\" = \"#FDB462\",\n    \"6\" = \"#B3DE69\",\n    \"7\" = \"#FCCDE5\",\n    \"8\" = \"#DC863B\",\n    \"9\" = \"#BC80BD\",\n    \"10\" = \"#11c638\",\n    \"11\" = \"#BCBD22FF\",\n    \"12\" = \"#17BECFFF\",\n    \"13\" = \"#AEC7E8FF\",\n    \"14\" = \"#EAD3C6\",\n    \"15\" = \"#98DF8AFF\",\n    \"16\" = \"#FF9896FF\",\n    \"17\" = \"#C5B0D5FF\",\n    \"18\" = \"#C49C94FF\",\n    \"19\" = \"#F7B6D2FF\",\n    \"20\" = \"#D33F6A\",\n    \"21\" = \"#8E063B\",\n    \"22\" = \"#023FA5\"\n)\n\ncluster_labels <- embedding |>\n    dplyr::group_by(.data[[\"louvain\"]]) |>\n    dplyr::summarise(\n        x = quantile(.data[[x_column]], 0.5),\n        y = quantile(.data[[y_column]], 0.5),\n        .groups = \"drop\"\n    ) |>\n    as.data.frame()\ncluster_labels[cluster_labels[[\"louvain\"]] == 14, c(\"x\", \"y\")] <- c(6.8, -1.8)\n\nclusters_unidentified <- c(2, 3, 4, 5, 6, 7, 13, 15, 16)\ncluster_labels <- cluster_labels |>\n    dplyr::mutate(\n        label = dplyr::case_when(\n            louvain %in% clusters_unidentified ~ paste0(\n                \"U\",\n                as.character(louvain)\n            ),\n            TRUE ~ as.character(louvain)\n        )\n    )\n\n# cluster\np_embedding_cluster <- embedding |>\n    arrange(desc(louvain)) |>\n    ggplot(\n        aes(\n            x = .data[[x_column]],\n            y = .data[[y_column]],\n            color = .data[[\"louvain\"]] |> as.factor()\n        )\n    ) +\n    geom_point(\n        size = 0.45,\n        alpha = 1,\n        stroke = 0,\n        shape = 16\n    ) +\n    scale_color_manual(\n        values = color_palette_cluster\n    ) +\n    theme_void() +\n    ggplot2::guides(color = \"none\") +\n    ggplot2::annotate(\n        \"text\",\n        family = \"Arial\",\n        x = cluster_labels[, \"x\"],\n        y = cluster_labels[, \"y\"],\n        label = cluster_labels[, \"label\"],\n        parse = TRUE,\n        size = 2,\n        color = c(\"black\")\n    )\n\n# lineage\np_embedding_lineage <- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding |>\n        dplyr::mutate(\n            value = factor(lineage,\n                levels = c(\"Blastoid\", \"TE\", \"HYP\", \"EPI\", \"Pre-lineage\")\n            )\n        ) |>\n        dplyr::pull(value),\n    label = NULL,\n    color_legend = TRUE,\n    sort_values = TRUE,\n    geom_point_size = 0.45,\n) +\n    theme_customized_embedding(void = TRUE) +\n    ggplot2::scale_color_manual(\n        name = NULL,\n        values = c(\"grey70\", \"#8ace7e\", \"#ff684c\", \"#9467bd\", \"#ffd8b1\"),\n        breaks = c(\"Blastoid\", \"EPI\", \"HYP\", \"TE\", \"Pre-lineage\"),\n        labels = c(\n            \"Blastoid cells\", \"Epiblast (EPI)\", \"Hypoblast (HYP)\",\n            \"Trophectoderm (TE)\", \"Pre-lineage\"\n        ),\n        na.value = \"grey70\"\n    )\n\n# developmental stage\np_embedding_developmental_stage <- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$developmental_stage,\n    label = NULL,\n    color_legend = TRUE,\n    sort_values = TRUE,\n    geom_point_size = 0.45,\n) +\n    theme_customized_embedding(void = TRUE) +\n    ggplot2::scale_color_manual(\n        name = NULL,\n        values = c(\n            \"grey70\",\n            ggthemes::tableau_color_pal(\"Tableau 10\")(\n                length(unique(embedding$developmental_stage))\n            )\n        ),\n        labels = c(\"Blastoid cells\", \"E3\", \"E4\", \"E5\", \"E6\", \"E7\"),\n        na.value = \"grey70\"\n    )\n\n\nfeatures_selected <- c(\n    \"ENSG00000181449_SOX2\",\n    \"ENSG00000187498_COL4A1\",\n    \"ENSG00000179348_GATA2\"\n)\n\nlineage_labels <- c(\n    \"(Epiblast)\",\n    \"(Hypoblast)\",\n    \"(Trophectoderm)\"\n)\n\nCB_POSITION <- c(0.875, 0.32)\nx_label <- ggplot_build(\n    p_embedding_POU5F1\n)$layout$panel_params[[1]][c(\"x.range\")] |>\n    unlist() |>\n    quantile(0.575)\ny_label <- ggplot_build(\n    p_embedding_POU5F1\n)$layout$panel_params[[1]][c(\"y.range\")] |>\n    unlist() |>\n    quantile(0.8)\n\np_embedding_SOX2_COL4A1_GATA2 <- purrr::map2(\n    features_selected, lineage_labels, \\(x, y) {\n        selected_feature <- x\n        values <- log10(calc_cpm(matrix_readcount_use)[x, embedding$cell] + 1)\n        values[embedding$batch == \"PRJEB11202\"] <- NA\n\n        plot_embedding(\n            data = embedding[, c(x_column, y_column)],\n            color = log10(\n                calc_cpm(matrix_readcount_use[, embedding$cell])\n                [selected_feature, ] + 1\n            ),\n            label = NULL,\n            color_legend = TRUE,\n            sort_values = TRUE,\n            rasterise = RASTERISED,\n            geom_point_size = 0.5,\n            na_value = \"grey70\"\n        ) +\n            theme_customized_embedding(\n                x = CB_POSITION[1],\n                y = CB_POSITION[2],\n                void = TRUE,\n                legend_key_size = c(1.5, 1.5)\n            ) +\n            ggplot2::annotate(\n                geom = \"text\",\n                x = x_label,\n                y = y_label,\n                label = stringr::str_c(\n                    x |> stringr::str_remove(pattern = \"^E.+_\"),\n                    y,\n                    sep = \"\\n\"\n                ),\n                family = \"Arial\",\n                color = \"black\",\n                size = 5 / ggplot2::.pt,\n                hjust = 0.5,\n                vjust = 0\n                # parse = TRUE\n            )\n    }\n)\n\n\nc(\n    list(\n        p_embedding_cluster,\n        p_embedding_lineage,\n        p_embedding_developmental_stage\n    ),\n    p_embedding_SOX2_COL4A1_GATA2\n) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2, byrow = FALSE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nExpression\nEmbedding\n\nfeatures_selected <- c(\n    \"ENSG00000204531_POU5F1\",\n    \"ENSG00000203909_DPPA5\",\n    \"ENSG00000184344_GDF3\",\n    \"ENSG00000156574_NODAL\",\n    \"ENSG00000111704_NANOG\",\n    \"ENSG00000075388_FGF4\",\n    #\n    \"ENSG00000164736_SOX17\",\n    \"ENSG00000125798_FOXA2\",\n    \"ENSG00000136574_GATA4\",\n    \"ENSG00000141448_GATA6\",\n    \"ENSG00000134853_PDGFRA\",\n    \"ENSG00000115414_FN1\",\n    #\n    \"ENSG00000107485_GATA3\",\n    \"ENSG00000118777_ABCG2\",\n    \"ENSG00000165556_CDX2\",\n    \"ENSG00000137869_CYP19A1\",\n    \"ENSG00000172818_OVOL1\",\n    \"ENSG00000126353_CCR7\"\n)\n\npurrr::map(features_selected, \\(x) {\n    selected_feature <- x\n    values <- log10(calc_cpm(matrix_readcount_use)[x, embedding$cell] + 1)\n    values[embedding$batch == \"PRJEB11202\"] <- NA\n\n    plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = values,\n        label = NULL,\n        color_legend = TRUE,\n        sort_values = TRUE,\n        rasterise = RASTERISED,\n        geom_point_size = 0.5,\n        na_value = \"grey70\"\n    ) +\n        theme_customized_embedding(\n            x = CB_POSITION[1],\n            y = CB_POSITION[2],\n            void = TRUE,\n            legend_key_size = c(1.5, 1.5)\n        ) +\n        ggplot2::annotate(\n            geom = \"text\",\n            x = x_label,\n            y = y_label,\n            label = x |> stringr::str_remove(pattern = \"^E.+_\"),\n            family = \"Arial\",\n            color = \"black\",\n            size = 5 / ggplot2::.pt,\n            hjust = 0.5,\n            vjust = 0\n            # parse = TRUE\n        )\n}) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 3, byrow = FALSE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nLollipop\n\n\n\n\nclusters_selected_lollipop <- c(\n    11,\n    18,\n    0, 1, 8, 9, 12, 17\n)\n\ncells_selected_lollipop <- purrr::map(clusters_selected_lollipop, \\(x) {\n    embedding |>\n        filter(\n            louvain == x,\n            batch != \"PRJEB11202\"\n        ) |>\n        pull(cell)\n})\nnames(cells_selected_lollipop) <- clusters_selected_lollipop\n\nfeatures_selected <- c(\n    \"ENSG00000181449_SOX2\",\n    \"ENSG00000156574_NODAL\",\n    \"ENSG00000111704_NANOG\",\n    \"ENSG00000147596_PRDM14\",\n    \"ENSG00000075388_FGF4\",\n    #\n    \"ENSG00000164736_SOX17\",\n    \"ENSG00000125798_FOXA2\",\n    \"ENSG00000136574_GATA4\",\n    \"ENSG00000141448_GATA6\",\n    \"ENSG00000115414_FN1\",\n    \"ENSG00000187498_COL4A1\",\n    #\n    \"ENSG00000179348_GATA2\",\n    \"ENSG00000107485_GATA3\",\n    \"ENSG00000118777_ABCG2\",\n    #\n    \"ENSG00000126353_CCR7\",\n    \"ENSG00000137869_CYP19A1\",\n    \"ENSG00000169550_MUC15\",\n    \"ENSG00000172818_OVOL1\"\n)\n\nplot_lollipop(\n    cells = cells_selected_lollipop,\n    features = features_selected,\n    matrix_cpm = calc_cpm(matrix_readcount_use),\n    size_range_limits = c(0, 4),\n    dot_size = 3\n) +\n    ggplot2::theme(\n        legend.box = \"horizontal\",\n        axis.text.x.top = ggplot2::element_text(\n            angle = 90, vjust = 0.5, hjust = 0\n        )\n    )\n\n\n\n\n\n\n\nViolin\n\nfeatures_selected <- c(\n    \"ENSG00000204531_POU5F1\",\n    \"ENSG00000203909_DPPA5\",\n    \"ENSG00000125798_FOXA2\",\n    \"ENSG00000134853_PDGFRA\",\n    \"ENSG00000107485_GATA3\",\n    \"ENSG00000118777_ABCG2\"\n)\n\nclusters_selected_violin <- c(\n    11,\n    18,\n    0, 1, 8, 9, 12, 17\n)\n\n# blastoid\ncells_violin <- purrr::map(clusters_selected_violin, \\(x) {\n    embedding |>\n        dplyr::filter(\n            louvain == x,\n            batch != \"PRJEB11202\"\n        ) |>\n        dplyr::pull(cell)\n})\nnames(cells_violin) <- clusters_selected_violin\n\np_violin_blastoid <- plot_violin(\n    cells = cells_violin,\n    features = features_selected,\n    matrix_cpm = calc_cpm(matrix_readcount_use),\n    x_range_breaks = NULL\n) +\n    ggplot2::scale_fill_manual(\n        name = NULL,\n        values = color_palette_cluster\n    ) +\n    ggplot2::scale_color_manual(\n        name = NULL,\n        values = color_palette_cluster\n    ) +\n    ggplot2::labs(title = \"Blastoids; 10x Genomics\") +\n    theme_customized_violin(panel_border_color = \"black\") +\n    ggplot2::theme(\n        plot.title = ggplot2::element_text(\n            family = \"Arial\",\n            size = 8,\n            margin = ggplot2::margin(\n                t = 0, r = 0, b = 1, l = 0,\n                unit = \"mm\"\n            ),\n            hjust = 0.5\n        )\n    )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. Please use\n`linewidth` instead.\nℹ The deprecated feature was likely used in the ggplot2 package.\n  Please report the issue at <https://github.com/tidyverse/ggplot2/issues>.\n\n# in vivo\ncells_violin <- purrr::map(clusters_selected_violin, \\(x) {\n    embedding |>\n        filter(\n            louvain == x,\n            batch == \"PRJEB11202\"\n        ) |>\n        pull(cell)\n})\nnames(cells_violin) <- clusters_selected_violin\n\n# re-aligned\np_violin_PRJEB11202 <- plot_violin(\n    cells = cells_violin,\n    features = features_selected,\n    matrix_cpm = calc_cpm(matrix_readcount_use),\n    x_range_breaks = NULL,\n    y_title = NULL\n) +\n    ggplot2::scale_fill_manual(\n        name = NULL,\n        values = color_palette_cluster\n    ) +\n    ggplot2::scale_color_manual(\n        name = NULL,\n        values = color_palette_cluster\n    ) +\n    ggplot2::labs(title = \"Human pre-implantation embryos; Smart-Seq2\") +\n    theme_customized_violin(panel_border_color = \"black\") +\n    ggplot2::theme(\n        plot.title = ggplot2::element_text(\n            family = \"Arial\",\n            size = 8,\n            margin = ggplot2::margin(\n                t = 0, r = 0, b = 1, l = 0,\n                unit = \"mm\"\n            ),\n            hjust = 0.5\n        )\n    )\n\np_violin_PRJEB11202 <- p_violin_PRJEB11202 +\n    theme(\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank()\n    )\n\np_violin_blastoid_dims <- patchwork::get_dim(p_violin_blastoid)\np_violin_PRJEB11202_aligned <- patchwork::set_dim(\n    p_violin_PRJEB11202,\n    p_violin_blastoid_dims\n)\n\n\ngridExtra::grid.arrange(\n    p_violin_blastoid, p_violin_PRJEB11202_aligned,\n    ncol = 2,\n    clip = FALSE\n)\n\n\n\n\n\n\n\nCluster composition\n\nclusters_selected <- c(\n    11,\n    18,\n    0, 1, 8, 9, 12, 17,\n    10, 14\n)\n\ncell_distribution_labels_right <- calc_group_composition(\n    data = embedding,\n    x = \"louvain\",\n    group = \"lineage\"\n) |>\n    dplyr::filter(\n        is.na(lineage),\n        louvain %in% clusters_selected\n    ) |>\n    dplyr::mutate(\n        louvain = factor(\n            louvain,\n            levels = rev(louvain)\n        )\n    )\n\ncell_distribution_labels_left <- tibble::tribble(\n    ~louvain, ~lineage, ~label_position, ~percentage,\n    11L, \"EPI\", 0.068306011, 0.136612022,\n    18L, \"HYP\", 0.20930232, 0.37209302,\n    0L, \"TE\", 0.036855838, 0.063274625,\n    1L, \"TE\", 0.20350404, 0.33513028,\n    8L, \"TE\", 0.095531587, 0.181818182,\n    9L, \"TE\", 0.19649123, 0.2877193,\n    12L, \"TE\", 0.073972603, 0.126027397,\n    17L, \"TE\", 0.09583335, 0.1916667,\n    10L, \"Pre-lineage\", 0.284146342, 0.412195122,\n    14L, \"Pre-lineage\", 0.24698795, 0.4939759\n) |>\n    dplyr::mutate(\n        louvain = factor(\n            louvain,\n            levels = rev(clusters_selected)\n        )\n    )\n\ncalc_group_composition(\n    data = embedding,\n    x = \"louvain\",\n    group = \"lineage\"\n) |>\n    dplyr::filter(louvain %in% clusters_selected) |>\n    dplyr::mutate(\n        louvain = factor(louvain, levels = rev(clusters_selected)),\n        lineage = dplyr::case_when(\n            is.na(lineage) ~ \"Blastoid\",\n            TRUE ~ as.character(lineage)\n        ),\n        lineage = factor(lineage,\n            levels = rev(c(\"EPI\", \"HYP\", \"TE\", \"Pre-lineage\", \"Blastoid\"))\n        )\n    ) |>\n    plot_barplot(\n        x = \"louvain\",\n        y = \"percentage\",\n        z = \"lineage\"\n    ) +\n    ggplot2::theme(\n        panel.grid.major.y = ggplot2::element_line(color = \"grey80\")\n    ) +\n    ggplot2::coord_flip() +\n    ggplot2::scale_fill_manual(\n        name = NULL,\n        values = c(\"grey85\", \"#8ace7e\", \"#ff684c\", \"#9467bd\", \"#ffd8b1\"),\n        breaks = c(\"Blastoid\", \"EPI\", \"HYP\", \"TE\", \"Pre-lineage\"),\n        labels = c(\n            \"Blastoid cells\", \"Epiblast (EPI)\", \"Hypoblast (HYP)\",\n            \"Trophectoderm (TE)\", \"Pre-lineage\"\n        )\n    ) +\n    ggplot2::geom_text(\n        ggplot2::aes(\n            y = label_position,\n            x = louvain,\n            label = scales::percent(percentage, accuracy = 1L),\n            group = NULL\n        ),\n        size = 1.8,\n        family = \"Arial\",\n        color = \"black\",\n        data = cell_distribution_labels_left,\n        hjust = 0.5\n    ) +\n    ggplot2::geom_text(\n        ggplot2::aes(\n            y = 0.825,\n            x = louvain,\n            label = scales::percent(percentage, accuracy = 1L),\n            group = NULL\n        ),\n        size = 1.8,\n        family = \"Arial\",\n        color = \"black\",\n        data = cell_distribution_labels_right,\n        hjust = 0\n    )\n\n\n\n\n\n\n\nHeatmap construction\n\n# prepare features; cells; heatmap matrix;\nfeatures_heatmap <- c(\n    \"ENSG00000204531_POU5F1\",\n    \"ENSG00000184344_GDF3\",\n    \"ENSG00000203909_DPPA5\",\n    \"ENSG00000181449_SOX2\",\n    \"ENSG00000111704_NANOG\",\n    \"ENSG00000241186_TDGF1\",\n    \"ENSG00000156574_NODAL\",\n    \"ENSG00000254339_AC064802.1\",\n    \"ENSG00000283567_C19orf85\",\n    \"ENSG00000151650_VENTX\",\n    \"ENSG00000163032_VSNL1\",\n    \"ENSG00000159231_CBR3\",\n    \"ENSG00000145423_SFRP2\",\n    \"ENSG00000006468_ETV1\",\n    \"ENSG00000147596_PRDM14\",\n    #\n    \"ENSG00000136574_GATA4\",\n    \"ENSG00000164266_SPINK1\",\n    \"ENSG00000158966_CACHD1\",\n    \"ENSG00000164093_PITX2\",\n    \"ENSG00000087303_NID2\",\n    \"ENSG00000174358_SLC6A19\",\n    \"ENSG00000134962_KLB\",\n    \"ENSG00000167780_SOAT2\",\n    \"ENSG00000110245_APOC3\",\n    \"ENSG00000170558_CDH2\",\n    \"ENSG00000125848_FLRT3\",\n    \"ENSG00000129538_RNASE1\",\n    \"ENSG00000100079_LGALS2\",\n    \"ENSG00000134853_PDGFRA\",\n    \"ENSG00000164736_SOX17\",\n    \"ENSG00000017427_IGF1\",\n    \"ENSG00000275410_HNF1B\",\n    \"ENSG00000118137_APOA1\",\n    \"ENSG00000198336_MYL4\",\n    \"ENSG00000171557_FGG\",\n    \"ENSG00000125798_FOXA2\",\n    \"ENSG00000146374_RSPO3\",\n    \"ENSG00000115414_FN1\",\n    \"ENSG00000164292_RHOBTB3\",\n    \"ENSG00000141448_GATA6\",\n    \"ENSG00000187498_COL4A1\",\n    #\n    \"ENSG00000196549_MME\",\n    \"ENSG00000138814_PPP3CA\",\n    \"ENSG00000082074_FYB1\",\n    \"ENSG00000123191_ATP7B\",\n    \"ENSG00000175318_GRAMD2A\",\n    \"ENSG00000100593_ISM2\",\n    \"ENSG00000265107_GJA5\",\n    \"ENSG00000226887_ERVMER34-1\",\n    \"ENSG00000183734_ASCL2\",\n    \"ENSG00000143850_PLEKHA6\",\n    \"ENSG00000103534_TMC5\",\n    \"ENSG00000132470_ITGB4\",\n    \"ENSG00000180999_C1orf105\",\n    \"ENSG00000109610_SOD3\",\n    \"ENSG00000143369_ECM1\",\n    \"ENSG00000204632_HLA-G\",\n    \"ENSG00000113594_LIFR\",\n    \"ENSG00000168394_TAP1\",\n    \"ENSG00000183287_CCBE1\",\n    \"ENSG00000079393_DUSP13\",\n    \"ENSG00000121769_FABP3\",\n    \"ENSG00000182985_CADM1\",\n    \"ENSG00000164692_COL1A2\",\n    \"ENSG00000112655_PTK7\",\n    \"ENSG00000134873_CLDN10\",\n    \"ENSG00000108375_RNF43\",\n    \"ENSG00000254726_MEX3A\",\n    \"ENSG00000164120_HPGD\",\n    \"ENSG00000081026_MAGI3\",\n    \"ENSG00000120738_EGR1\",\n    \"ENSG00000108960_MMD\",\n    \"ENSG00000112137_PHACTR1\",\n    \"ENSG00000166450_PRTG\",\n    \"ENSG00000164099_PRSS12\",\n    \"ENSG00000143320_CRABP2\",\n    \"ENSG00000145681_HAPLN1\",\n    \"ENSG00000113196_HAND1\",\n    \"ENSG00000198300_PEG3\",\n    \"ENSG00000101144_BMP7\",\n    \"ENSG00000174498_IGDCC3\",\n    \"ENSG00000132005_RFX1\",\n    \"ENSG00000099814_CEP170B\",\n    \"ENSG00000101986_ABCD1\",\n    \"ENSG00000144648_ACKR2\",\n    \"ENSG00000074410_CA12\",\n    \"ENSG00000125740_FOSB\",\n    \"ENSG00000183979_NPB\",\n    \"ENSG00000214049_UCA1\",\n    \"ENSG00000153071_DAB2\",\n    \"ENSG00000126353_CCR7\",\n    \"ENSG00000105880_DLX5\",\n    \"ENSG00000124749_COL21A1\",\n    \"ENSG00000112041_TULP1\",\n    \"ENSG00000120211_INSL4\",\n    \"ENSG00000223850_MYCNUT\",\n    \"ENSG00000164707_SLC13A4\",\n    \"ENSG00000173157_ADAMTS20\",\n    \"ENSG00000196482_ESRRG\",\n    \"ENSG00000180875_GREM2\",\n    \"ENSG00000170255_MRGPRX1\",\n    \"ENSG00000267943_AC010328.1\",\n    \"ENSG00000172818_OVOL1\",\n    \"ENSG00000137270_GCM1\",\n    \"ENSG00000137869_CYP19A1\",\n    \"ENSG00000135678_CPM\",\n    \"ENSG00000171476_HOPX\",\n    \"ENSG00000249861_LGALS16\",\n    \"ENSG00000108244_KRT23\",\n    \"ENSG00000169550_MUC15\",\n    \"ENSG00000260034_LCMT1-AS2\",\n    \"ENSG00000269526_ERVV-1\",\n    \"ENSG00000028137_TNFRSF1B\",\n    \"ENSG00000124731_TREM1\",\n    \"ENSG00000072422_RHOBTB1\",\n    \"ENSG00000185215_TNFAIP2\",\n    \"ENSG00000164877_MICALL2\",\n    \"ENSG00000244476_ERVFRD-1\",\n    \"ENSG00000280109_PLAC4\",\n    \"ENSG00000111057_KRT18\",\n    \"ENSG00000170421_KRT8\",\n    \"ENSG00000169583_CLIC3\",\n    \"ENSG00000107485_GATA3\",\n    \"ENSG00000179348_GATA2\",\n    \"ENSG00000187186_AL162231.1\",\n    \"ENSG00000176155_CCDC57\",\n    \"ENSG00000133243_BTBD2\",\n    \"ENSG00000179364_PACS2\",\n    \"ENSG00000237651_C2orf74\",\n    \"ENSG00000125726_CD70\",\n    \"ENSG00000156587_UBE2L6\",\n    \"ENSG00000182165_TP53TG1\",\n    \"ENSG00000163017_ACTG2\",\n    \"ENSG00000143632_ACTA1\",\n    \"ENSG00000119632_IFI27L2\",\n    \"ENSG00000185847_LINC01405\",\n    \"ENSG00000116661_FBXO2\",\n    \"ENSG00000196878_LAMB3\",\n    \"ENSG00000122861_PLAU\",\n    \"ENSG00000142227_EMP3\",\n    \"ENSG00000011422_PLAUR\",\n    \"ENSG00000100985_MMP9\",\n    \"ENSG00000026508_CD44\",\n    \"ENSG00000104368_PLAT\",\n    \"ENSG00000164171_ITGA2\",\n    \"ENSG00000101198_NKAIN4\",\n    \"ENSG00000116774_OLFML3\",\n    \"ENSG00000125398_SOX9\",\n    \"ENSG00000124225_PMEPA1\",\n    \"ENSG00000118785_SPP1\",\n    \"ENSG00000163453_IGFBP7\",\n    \"ENSG00000182871_COL18A1\",\n    \"ENSG00000110925_CSRNP2\",\n    \"ENSG00000165886_UBTD1\",\n    \"ENSG00000115073_ACTR1B\",\n    \"ENSG00000256288_AC022075.3\",\n    \"ENSG00000228106_AL392172.1\",\n    \"ENSG00000163577_EIF5A2\"\n)\n\n# heatmap matrix\nclusters_selected_heatmap <- c(\n    11,\n    18,\n    0, 1, 8, 9, 12, 17\n)\n\nmatrix_heatmap <- calc_cpm(matrix_readcount_use)[\n    features_heatmap,\n    embedding |>\n        dplyr::filter(\n            louvain %in% clusters_selected_heatmap,\n            batch != \"PRJEB11202\"\n        ) |>\n        dplyr::pull(cell)\n]\n\nmatrix_heatmap <- matrix_heatmap[rowSums(matrix_heatmap) != 0, ]\n\nmatrix_heatmap <- log10(matrix_heatmap + 1)\nmatrix_heatmap <- t(scale(t(matrix_heatmap)))\n\nheatmap_limits <- quantile(matrix_heatmap, c(0.05, 0.95))\nmatrix_heatmap[matrix_heatmap < heatmap_limits[1]] <- heatmap_limits[1]\nmatrix_heatmap[matrix_heatmap > heatmap_limits[2]] <- heatmap_limits[2]\n\n\n# sample cells\ncells_heatmap_sampled <- purrr::map(clusters_selected_heatmap, \\(x) {\n    cells_in_group <- embedding |>\n        filter(\n            louvain == x,\n            batch != \"PRJEB11202\"\n        ) |>\n        pull(cell)\n\n    cat(length(cells_in_group), \"\\n\")\n\n    if (length(cells_in_group) >= 100) {\n        c <- sample(cells_in_group, 100)\n    } else {\n        c <- cells_in_group\n    }\n\n    return(c)\n})\n## 312 \n## 51 \n## 1428 \n## 682 \n## 528 \n## 376 \n## 310 \n## 97\nnames(cells_heatmap_sampled) <- clusters_selected_heatmap\n\n# cells\nclusters_EPI <- 11\nclusters_HYP <- 18\nclusters_TE <- c(0, 1, 8, 9, 12, 17)\n\ncells_heatmap_EPI <- embedding |>\n    dplyr::filter(\n        batch != \"PRJEB11202\",\n        louvain %in% clusters_EPI,\n        cell %in% unlist(cells_heatmap_sampled)\n    ) |>\n    dplyr::pull(cell)\n\ncells_heatmap_HYP <- embedding |>\n    dplyr::filter(\n        batch != \"PRJEB11202\",\n        louvain %in% clusters_HYP,\n        cell %in% unlist(cells_heatmap_sampled)\n    ) |>\n    dplyr::pull(cell)\n\ncells_heatmap_TE <- cells_heatmap_sampled[as.character(clusters_TE)] |>\n    unlist()\n\npurrr::map_int(\n    list(cells_heatmap_EPI, cells_heatmap_HYP, cells_heatmap_TE),\n    length\n)\n## [1] 100  51 597\n\n\n# column annotation\nha_cluster <- embedding[\n    match(\n        x = cells_heatmap_sampled |> unlist(),\n        table = embedding$cell\n    ), \"louvain\",\n    drop = TRUE\n]\n\nha_lineage <- rep(\"TE\", length(ha_cluster))\nha_lineage[ha_cluster == \"11\"] <- \"EPI\"\nha_lineage[ha_cluster %in% c(\"18\")] <- \"HYP\"\n\n\n# map color\ncol_fun <- circlize::colorRamp2(\n    quantile(\n        c(\n            min(matrix_heatmap),\n            max(matrix_heatmap)\n        ),\n        seq(0, 1, 0.1)\n    ),\n    viridis::plasma(11)\n)\n\n\n# features to mark\nfeatures_to_mark_left <- c(\n    \"ENSG00000184344_GDF3\",\n    \"ENSG00000241186_TDGF1\",\n    \"ENSG00000156574_NODAL\",\n    \"ENSG00000066468_FGFR2\",\n    \"ENSG00000111704_NANOG\",\n    \"ENSG00000204531_POU5F1\",\n    \"ENSG00000203909_DPPA5\",\n    \"ENSG00000181449_SOX2\",\n    \"ENSG00000186103_ARGFX\",\n    \"ENSG00000147596_PRDM14\",\n    \"ENSG00000171872_KLF17\",\n    \"ENSG00000086548_CEACAM6\",\n    \"ENSG00000166073_GPR176\",\n    \"ENSG00000125740_FOSB\",\n    \"ENSG00000105880_DLX5\",\n    \"ENSG00000169583_CLIC3\",\n    \"ENSG00000244476_ERVFRD-1\",\n    \"ENSG00000072422_RHOBTB1\",\n    \"ENSG00000137869_CYP19A1\",\n    \"ENSG00000169550_MUC15\",\n    \"ENSG00000108244_KRT23\",\n    \"ENSG00000260034_LCMT1-AS2\"\n)\n\nfeatures_to_mark_right <- c(\n    \"ENSG00000187498_COL4A1\",\n    \"ENSG00000136574_GATA4\",\n    \"ENSG00000115414_FN1\",\n    \"ENSG00000125798_FOXA2\",\n    \"ENSG00000164736_SOX17\",\n    \"ENSG00000141448_GATA6\",\n    \"ENSG00000275410_HNF1B\",\n    \"ENSG00000153707_PTPRD\",\n    \"ENSG00000101441_CST4\",\n    \"ENSG00000146374_RSPO3\",\n    \"ENSG00000111057_KRT18\",\n    \"ENSG00000170421_KRT8\",\n    \"ENSG00000153071_DAB2\",\n    \"ENSG00000107485_GATA3\",\n    \"ENSG00000179348_GATA2\",\n    \"ENSG00000144648_ACKR2\",\n    \"ENSG00000126353_CCR7\",\n    \"ENSG00000137270_GCM1\",\n    \"ENSG00000180875_GREM2\",\n    \"ENSG00000172818_OVOL1\",\n    \"ENSG00000265107_GJA5\",\n    \"ENSG00000132470_ITGB4\",\n    \"ENSG00000074410_CA12\",\n    \"ENSG00000124749_COL21A1\"\n)\n\n#\nfeatures_to_mark_left <- features_to_mark_left[\n    features_to_mark_left %in% rownames(matrix_heatmap)\n]\n\nha_left <- ComplexHeatmap::rowAnnotation(\n    foo = ComplexHeatmap::anno_mark(\n        at = which(rownames(matrix_heatmap) %in% features_to_mark_left),\n        labels = features_to_mark_left |>\n            stringr::str_remove(pattern = \"E.+_\"),\n        which = \"row\",\n        side = \"left\",\n        lines_gp = grid::gpar(col = \"grey50\"),\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        )\n    )\n)\n\n#\nfeatures_to_mark_right <- features_to_mark_right[\n    features_to_mark_right %in% rownames(matrix_heatmap)\n]\n\nha_right <- ComplexHeatmap::rowAnnotation(\n    foo = ComplexHeatmap::anno_mark(\n        at = which(rownames(matrix_heatmap) %in% features_to_mark_right),\n        labels = features_to_mark_right |>\n            stringr::str_remove(pattern = \"E.+_\"),\n        which = \"row\",\n        side = \"right\",\n        lines_gp = grid::gpar(col = \"grey50\"),\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        )\n    )\n)\n\n\nRASTERISED <- FALSE\n\n\n# EPI\nanno_labels_tbl_EPI <- table(\n    ha_cluster[ha_cluster %in% clusters_EPI]\n)[as.character(clusters_EPI)] |>\n    tibble::as_tibble() |>\n    dplyr::mutate(\n        cum_sum = cumsum(value),\n        position = cum_sum - value / 2\n    )\n\nanno_labels_cluster_EPI <- rep(\n    NA, length(ha_cluster[ha_cluster %in% clusters_EPI])\n)\n\nif (nchar(as.character(clusters_EPI)) > 1) {\n    cluster_label <- strsplit(as.character(clusters_EPI), \"\")[[1]]\n\n    anno_labels_cluster_EPI[\n        anno_labels_tbl_EPI$position - 5\n    ] <- cluster_label[1]\n    anno_labels_cluster_EPI[\n        anno_labels_tbl_EPI$position + 5\n    ] <- cluster_label[2]\n} else {\n    anno_labels_cluster_EPI[anno_labels_tbl_EPI$position] <- as.character(\n        clusters_EPI\n    )\n}\n\nha_column_EPI <- ComplexHeatmap::HeatmapAnnotation(\n    #\n    lineage = ComplexHeatmap::anno_simple(\n        ha_lineage[ha_lineage == \"EPI\"],\n        # pch = anno_labels_cluster,\n        col = setNames(\n            object = c(\"grey85\", \"#8ace7e\", \"#ff684c\", \"#9467bd\", \"#ffd8b1\"),\n            nm = c(\"Blastoid\", \"EPI\", \"HYP\", \"TE\", \"n/a\")\n        ),\n        which = \"column\",\n        pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    #\n    cluster = ComplexHeatmap::anno_simple(\n        ha_cluster[ha_cluster %in% clusters_EPI],\n        pch = anno_labels_cluster_EPI,\n        col = color_palette_cluster[as.character(clusters_selected_heatmap)],\n        which = \"column\",\n        # pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    #\n    show_annotation_name = TRUE,\n    annotation_label = c(\n        \"Lineage\",\n        \"Cluster\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    annotation_name_side = \"left\"\n)\n\nht_EPI <- ComplexHeatmap::Heatmap(\n    matrix = matrix_heatmap[, cells_heatmap_EPI] |> as.matrix(),\n    rect_gp = grid::gpar(col = NA, lwd = 0),\n    col = col_fun,\n    #\n    row_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    row_title_rot = 0,\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = 0,\n    #\n    cluster_rows = FALSE,\n    show_row_dend = FALSE,\n    cluster_columns = FALSE,\n    show_column_dend = FALSE,\n    #\n    show_row_names = FALSE,\n    show_column_names = FALSE,\n    #\n    top_annotation = ha_column_EPI,\n    bottom_annotation = NULL,\n    left_annotation = ha_left,\n    right_annotation = NULL,\n    #\n    column_split = factor(\n        ha_lineage[ha_lineage == \"EPI\"],\n        levels = unique(ha_lineage[ha_lineage == \"EPI\"])\n    ),\n    column_gap = unit(0, \"mm\"),\n    #\n    show_heatmap_legend = FALSE,\n    heatmap_legend_param = list(\n        # title = expression(paste(\"Log\"[10], \" (CPM + 1)\")),\n        title = \"Expr\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = unit(15, \"mm\"),\n        legend_width = unit(5, \"mm\")\n    ),\n    #\n    use_raster = RASTERISED,\n    #\n    width = unit(8, \"mm\")\n)\n# ComplexHeatmap::draw(ht_EPI)\n\n\n# HYP\nanno_labels_tbl_HYP <- table(\n    ha_cluster[ha_cluster %in% clusters_HYP]\n)[as.character(clusters_HYP)] |>\n    as_tibble() |>\n    mutate(\n        cum_sum = cumsum(value),\n        position = cum_sum - value / 2\n    )\n\nanno_labels_cluster_HYP <- rep(\n    NA, length(ha_cluster[ha_cluster %in% clusters_HYP])\n)\n\nif (nchar(as.character(clusters_HYP)) > 1) {\n    cluster_label <- strsplit(as.character(clusters_HYP), \"\")[[1]]\n\n    anno_labels_cluster_HYP[\n        anno_labels_tbl_HYP$position - 5\n    ] <- cluster_label[1]\n    anno_labels_cluster_HYP[\n        anno_labels_tbl_HYP$position + 5\n    ] <- cluster_label[2]\n} else {\n    anno_labels_cluster_HYP[\n        anno_labels_tbl_HYP$position\n    ] <- as.character(clusters_HYP)\n}\n\nha_column_HYP <- ComplexHeatmap::HeatmapAnnotation(\n    #\n    lineage = ComplexHeatmap::anno_simple(\n        ha_lineage[ha_lineage == \"HYP\"],\n        # pch = anno_labels_cluster,\n        col = setNames(\n            object = c(\"grey85\", \"#8ace7e\", \"#ff684c\", \"#9467bd\", \"#ffd8b1\"),\n            nm = c(\"Blastoid\", \"EPI\", \"HYP\", \"TE\", \"n/a\")\n        ),\n        which = \"column\",\n        pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    #\n    cluster = ComplexHeatmap::anno_simple(\n        ha_cluster[ha_cluster %in% clusters_HYP],\n        pch = anno_labels_cluster_HYP,\n        col = color_palette_cluster[as.character(clusters_selected_heatmap)],\n        which = \"column\",\n        # pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    #\n    show_annotation_name = FALSE,\n    annotation_label = c(\n        \"Lineage\",\n        \"Cluster\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    annotation_name_side = \"left\"\n)\n\nht_HYP <- ComplexHeatmap::Heatmap(\n    matrix = matrix_heatmap[, cells_heatmap_HYP] |> as.matrix(),\n    rect_gp = grid::gpar(col = NA, lwd = 0),\n    col = col_fun,\n    #\n    row_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    row_title_rot = 0,\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = 0,\n    #\n    cluster_rows = FALSE,\n    show_row_dend = FALSE,\n    cluster_columns = FALSE,\n    show_column_dend = FALSE,\n    #\n    show_row_names = FALSE,\n    show_column_names = FALSE,\n    #\n    top_annotation = ha_column_HYP,\n    bottom_annotation = NULL,\n    left_annotation = NULL,\n    right_annotation = NULL,\n    #\n    # row_split = table_s2_sheet4$ClusterID,\n    # row_gap = unit(0.3, \"mm\"),\n    column_split = factor(\n        ha_lineage[ha_lineage == \"HYP\"],\n        levels = unique(ha_lineage[ha_lineage == \"HYP\"])\n    ),\n    column_gap = unit(0, \"mm\"),\n    #\n    show_heatmap_legend = FALSE,\n    heatmap_legend_param = list(\n        # title = expression(paste(\"Log\"[10], \" (CPM + 1)\")),\n        title = \"Expr\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = unit(15, \"mm\"),\n        legend_width = unit(5, \"mm\")\n    ),\n    #\n    use_raster = RASTERISED,\n    #\n    width = unit(5, \"mm\")\n)\n# ComplexHeatmap::draw(ht_HYP)\n\n\n# TE\nanno_labels_tbl_TE <- table(\n    ha_cluster[ha_cluster %in% clusters_TE]\n)[as.character(clusters_TE)] |>\n    tibble::enframe() |>\n    dplyr::mutate(\n        cum_sum = cumsum(value),\n        position = cum_sum - value / 2\n    )\n\nanno_labels_tbl_TE <- purrr::map(anno_labels_tbl_TE$name, \\(x) {\n    # works but ugly\n    a <- anno_labels_tbl_TE |>\n        filter(name == x)\n\n    if (nchar(a$name) > 1) {\n        cluster_label <- strsplit(as.character(a$name), \"\")[[1]]\n\n        a <- rbind(a, a)\n\n        a[1, 1] <- cluster_label[1]\n        a[2, 1] <- cluster_label[2]\n        a <- a |> as.data.frame()\n        a[1, 4] <- a[1, 4] - 5\n        a[2, 4] <- a[2, 4] + 5\n    }\n    return(a)\n}) |>\n    purrr::reduce(rbind)\n\nanno_labels_cluster_TE <- rep(\n    NA, length(ha_cluster[ha_cluster %in% clusters_TE])\n)\nanno_labels_cluster_TE[anno_labels_tbl_TE$position] <- anno_labels_tbl_TE$name\n\nha_column_TE <- ComplexHeatmap::HeatmapAnnotation(\n    #\n    lineage = ComplexHeatmap::anno_simple(\n        ha_lineage[ha_lineage == \"TE\"],\n        # pch = anno_labels_cluster,\n        col = setNames(\n            object = c(\"grey85\", \"#8ace7e\", \"#ff684c\", \"#9467bd\", \"#ffd8b1\"),\n            nm = c(\"Blastoid\", \"EPI\", \"HYP\", \"TE\", \"n/a\")\n        ),\n        which = \"column\",\n        pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    #\n    cluster = ComplexHeatmap::anno_simple(\n        ha_cluster[ha_cluster %in% clusters_TE],\n        pch = anno_labels_cluster_TE,\n        col = color_palette_cluster[as.character(clusters_selected_heatmap)],\n        which = \"column\",\n        # pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    #\n    show_annotation_name = FALSE,\n    annotation_label = c(\n        \"Lineage\",\n        \"Cluster\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    annotation_name_side = \"left\"\n)\n\nht_TE <- ComplexHeatmap::Heatmap(\n    matrix = matrix_heatmap[, cells_heatmap_TE] |> as.matrix(),\n    rect_gp = grid::gpar(col = NA, lwd = 0),\n    col = col_fun,\n    #\n    row_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    row_title_rot = 0,\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = 0,\n    #\n    cluster_rows = FALSE,\n    show_row_dend = FALSE,\n    cluster_columns = FALSE,\n    show_column_dend = FALSE,\n    #\n    show_row_names = FALSE,\n    show_column_names = FALSE,\n    #\n    top_annotation = ha_column_TE,\n    bottom_annotation = NULL,\n    left_annotation = NULL,\n    right_annotation = ha_right,\n    #\n    column_split = factor(\n        ha_lineage[ha_lineage == \"TE\"],\n        levels = unique(ha_lineage[ha_lineage == \"TE\"])\n    ),\n    column_gap = unit(0, \"mm\"),\n    #\n    show_heatmap_legend = FALSE,\n    heatmap_legend_param = list(\n        title = \"Expr\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = unit(15, \"mm\"),\n        legend_width = unit(5, \"mm\")\n    ),\n    #\n    use_raster = RASTERISED,\n    #\n    width = unit(50, \"mm\")\n)\n\n\n# legend\nlgd_colorbar <- ComplexHeatmap::Legend(\n    col_fun = col_fun,\n    title = \"Expr\",\n    grid_height = unit(1, \"mm\"),\n    grid_width = unit(2, \"mm\"),\n    legend_height = unit(10, \"mm\"),\n    legend_width = unit(2, \"mm\"),\n    title_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    ),\n    labels_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 5\n    )\n)\n\npd <- ComplexHeatmap::packLegend(\n    lgd_colorbar,\n    # gap = unit(8, \"mm\"),\n    direction = \"vertical\"\n)\n\n\nComplexHeatmap::draw(\n    ht_EPI + ht_HYP + ht_TE,\n    heatmap_legend_list = list(pd),\n    ht_gap = unit(0, \"mm\")\n)\n\n\n\n\n\n\n\nGene Ontology enrichment\n\n\n\n\nenriched_go <- tibble::tribble(\n    ~category, ~rank, ~go_id, ~term, ~p_value, ~p_value_log,\n    \"EPI\", 1L, \"GO:0019827\", \"stem cell population maintenance\", 9e-07, 6.045757491,\n    \"EPI\", 2L, \"GO:0048368\", \"lateral mesoderm development\", 0.00053, 3.27572413,\n    \"EPI\", 3L, \"GO:0009790\", \"embryo development\", 0.00088, 3.055517328,\n    \"HYP\", 1L, \"GO:0048598\", \"embryonic morphogenesis\", 3.9e-07, 6.408935393,\n    \"HYP\", 2L, \"GO:0007369\", \"gastrulation\", 1.8e-05, 4.744727495,\n    \"HYP\", 3L, \"GO:0007492\", \"endoderm development\", 0.00284, 2.54668166,\n    \"TE\", 1L, \"GO:0001890\", \"placenta development\", 6e-11, 10.22184875,\n    \"TE\", 2L, \"GO:0001892\", \"embryonic placenta development\", 2e-08, 7.698970004,\n    \"TE\", 3L, \"GO:0048513\", \"animal organ development\", 2.7e-07, 6.568636236\n)\n\nenriched_go |>\n    dplyr::mutate(\n        category = factor(\n            category,\n            levels = c(\"EPI\", \"HYP\", \"TE\") #  |> rev()\n        ),\n        rank = factor(\n            rank,\n            levels = c(3, 2, 1)\n        )\n    ) |>\n    plot_barplot_go_enrichment(\n        x = p_value_log,\n        y = rank,\n        z = category\n    ) +\n    ggplot2::facet_wrap(\n        ~category,\n        nrow = 1,\n        strip.position = \"left\",\n        scales = \"free_x\",\n        labeller = ggplot2::labeller(\n            category = c(\"EPI\" = \"EPI\", \"HYP\" = \"HYP\", \"TE\" = \"TE\")\n        )\n    ) +\n    ggplot2::geom_text(\n        ggplot2::aes(\n            x = 0,\n            label = term,\n            group = NULL\n        ),\n        size = 2.2,\n        family = \"Arial\",\n        color = \"black\",\n        data = enriched_go |>\n            dplyr::mutate(\n                category = factor(\n                    category,\n                    levels = c(\"EPI\", \"HYP\", \"TE\")\n                ),\n                rank = factor(\n                    rank,\n                    levels = c(3, 2, 1)\n                ),\n                term = paste(\" \", term)\n            ),\n        hjust = 0\n    ) +\n    ggplot2::scale_fill_manual(\n        values = c(\"#8ace7e\", \"#ff684c\", \"#9467bd\")\n    )"
  },
  {
    "objectID": "analyze_blastoids.html#high-concordance-of-blastoid-replicates",
    "href": "analyze_blastoids.html#high-concordance-of-blastoid-replicates",
    "title": "Single Cell Transcriptomes of Human Blastoids",
    "section": "High concordance of blastoid replicates",
    "text": "High concordance of blastoid replicates\n\n\n\nData loading\n\nEMBEDDING_FILE <- \"embedding_replicate.csv.gz\"\n\nembedding_replicate <- read_csv(\n    file = file.path(PROJECT_DIR, \"github\", \"data\", EMBEDDING_FILE)\n) |>\n    dplyr::select(cell:y_fitsne)\n\n# clean up\nrm(EMBEDDING_FILE)\n\n\nMATRIX_DIR <- list(\n    \"github/data/matrices/LW36\",\n    \"github/data/matrices/LW49_LW50_LW51_LW52\",\n    \"github/data/matrices/LW58_LW59\",\n    \"github/data/matrices/LW60_LW61\",\n    \"raw/public/PRJEB11202/reformatted_matrix\"\n)\n\nmatrix_readcount_use <- purrr::map(MATRIX_DIR, \\(x) {\n    load_matrix(file.path(PROJECT_DIR, x))\n}) |>\n    purrr::reduce(cbind)\n\nmatrix_readcount_use <- matrix_readcount_use[, embedding_replicate$cell]\n\nEmbedding visualization\n\nEMBEDDING_TITLE_PREFIX <- \"FIt-SNE\"\n\nx_column <- \"x_fitsne\"\ny_column <- \"y_fitsne\"\n\nClustering & batch & UMI\n\np_embedding_replicate_louvain <- plot_embedding(\n    data = embedding_replicate[, c(x_column, y_column)],\n    color = embedding_replicate$louvain |> as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Cluster\"),\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_replicate_batch <- plot_embedding(\n    data = embedding_replicate[, c(x_column, y_column)],\n    color = embedding_replicate$batch |> as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Batch\"),\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\nCB_POSITION <- c(0.875, 0.3)\np_embedding_replicate_UMI <- plot_embedding(\n    data = embedding_replicate[, c(x_column, y_column)],\n    color = log10(\n        Matrix::colSums(matrix_readcount_use[, embedding_replicate$cell])\n    ),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; UMI\"),\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(\n        x = CB_POSITION[1],\n        y = CB_POSITION[2]\n    )\n\n\nembedding_replicate |>\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] > 0),\n    ) |>\n    dplyr::group_by(batch) |>\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |>\n    dplyr::mutate(\n        sample = dplyr::case_when(\n            batch == \"LW36\" ~ \"Blastoid, D8; TH; 5i/L/A\",\n            batch == \"LW60\" ~ \"Blastoid, D9; HT; 5i/L/A\",\n            batch == \"LW61\" ~ \"Blastoid, D9; HT; PXGL\"\n        )\n    ) |>\n    dplyr::select(\n        sample, dplyr::everything()\n    ) |>\n    gt::gt() |>\n    gt::data_color(\n        columns = c(median_umis),\n        colors = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = c(7500, 32000)\n        )\n    ) |>\n    gt::summary_rows(\n        columns = c(sample, batch),\n        fns = list(\n            Count = ~ n()\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::tab_header(\n        title = gt::md(\"**Clustering of TH- and HT-Blastoids**; Batch\")\n    )\n\n\n\n\n\n\n\nClustering of TH- and HT-Blastoids; Batch\n    \n\n\n      sample\n      batch\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\nBlastoid, D8; TH; 5i/L/A\nLW36\n6854\n31193\n5014\n\n\n\nBlastoid, D9; HT; 5i/L/A\nLW60\n4497\n14421\n3337\n\n\n\nBlastoid, D9; HT; PXGL\nLW61\n5156\n7625\n2185\n\n\nCount\n3\n3\n—\n—\n—\n\n\nMean\n—\n—\n—\n17,746\n3,512\n\n\nSum\n—\n—\n16,507\n—\n—\n\n\n\n\n\n\n\npurrr::reduce(\n    list(\n        p_embedding_replicate_louvain,\n        p_embedding_replicate_batch,\n        p_embedding_replicate_UMI\n    ), `+`\n) +\n    patchwork::plot_layout(ncol = 3) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nCluster composition\n\n\n\n\ncalc_group_composition(\n    data = embedding_replicate,\n    x = \"louvain\",\n    group = \"batch\"\n) |>\n    dplyr::mutate(\n        louvain = as.factor(louvain)\n    ) |>\n    plot_barplot(\n        x = \"louvain\",\n        y = \"percentage\",\n        z = \"batch\"\n    ) +\n    ggplot2::guides(fill = ggplot2::guide_legend(direction = \"horizontal\")) +\n    ggplot2::theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "analyze_blastoids.html#blastoids-derived-stem-cell-lines",
    "href": "analyze_blastoids.html#blastoids-derived-stem-cell-lines",
    "title": "Single Cell Transcriptomes of Human Blastoids",
    "section": "Blastoids derived stem cell lines",
    "text": "Blastoids derived stem cell lines\nData loading\n\nEMBEDDING_FILE <- \"embedding_stem.csv.gz\"\n\nembedding_stem <- read_csv(\n    file = file.path(\n        PROJECT_DIR, \"github\", \"data\", EMBEDDING_FILE\n    )\n)\n\nrm(EMBEDDING_FILE)\n\n\nMATRIX_DIR <- list(\n    \"github/data/matrices/LW36\",\n    \"github/data/matrices/LW49_LW50_LW51_LW52\",\n    \"github/data/matrices/LW58_LW59\",\n    \"github/data/matrices/LW60_LW61\",\n    \"raw/public/PRJEB11202/reformatted_matrix\"\n)\n\nmatrix_readcount_use <- purrr::map(MATRIX_DIR, \\(x) {\n    load_matrix(file.path(PROJECT_DIR, x))\n}) |>\n    purrr::reduce(cbind)\n\nmatrix_readcount_use <- matrix_readcount_use[, embedding_stem$cell]\n\nEmbedding visualization\n\nEMBEDDING_TITLE_PREFIX <- \"FIt-SNE\"\n\nx_column <- \"x_fitsne\"\ny_column <- \"y_fitsne\"\n\nClustering & batch & UMI\n\np_embedding_stem_batch <- plot_embedding(\n    data = embedding_stem[, c(x_column, y_column)],\n    color = embedding_stem$batch |> as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Batch\"),\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\nCB_POSITION <- c(0.875, 0.3)\np_embedding_stem_UMI <- plot_embedding(\n    data = embedding_stem[, c(x_column, y_column)],\n    color = log10(Matrix::colSums(matrix_readcount_use[, embedding_stem$cell])),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; UMI\"),\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(\n        x = CB_POSITION[1],\n        y = CB_POSITION[2]\n    )\n\nselected_feature <- \"ENSG00000204531_POU5F1\"\np_embedding_stem_POU5F1 <- plot_embedding(\n    data = embedding_stem[, c(x_column, y_column)],\n    color = log10(\n        calc_cpm(matrix_readcount_use[, embedding_stem$cell])\n        [selected_feature, ] + 1\n    ),\n    label = glue::glue(\n        \"{EMBEDDING_TITLE_PREFIX}; \",\n        \"{selected_feature |> stringr::str_remove(pattern = \\\"^E.+_\\\")}\"\n    ),\n    color_legend = TRUE,\n    sort_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE,\n    na_value = \"grey80\"\n) +\n    theme_customized_embedding(\n        x = CB_POSITION[1],\n        y = CB_POSITION[2]\n    )\n\n\nembedding_stem |>\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] > 0),\n    ) |>\n    dplyr::group_by(batch) |>\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |>\n    dplyr::mutate(\n        sample = dplyr::case_when(\n            batch == \"LW49\" ~ \"Naïve WIRB3; 5i/L/A\",\n            batch == \"LW50\" ~ \"Blastoid naïve ES cells; 5i/L/A\",\n            batch == \"LW51\" ~ \"Blastoid nEND; NACL\",\n            batch == \"LW52\" ~ \"Blastoid TSCs; TSM\"\n        )\n    ) |>\n    dplyr::select(\n        sample, dplyr::everything()\n    ) |>\n    gt::gt() |>\n    gt::data_color(\n        columns = c(median_umis),\n        colors = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = c(8500, 20000)\n        )\n    ) |>\n    gt::summary_rows(\n        columns = c(sample, batch),\n        fns = list(\n            Count = ~ n()\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        decimals = 0\n    ) |>\n    gt::tab_header(\n        title = gt::md(\"**Clustering of Blastoid Derived Cells**; Batch\")\n    )\n\n\n\n\n\n\n\nClustering of Blastoid Derived Cells; Batch\n    \n\n\n      sample\n      batch\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\nNaïve WIRB3; 5i/L/A\nLW49\n1638\n18363.0\n4025.5\n\n\n\nBlastoid naïve ES cells; 5i/L/A\nLW50\n2663\n9022.0\n2734.0\n\n\n\nBlastoid nEND; NACL\nLW51\n2055\n11767.0\n3250.0\n\n\n\nBlastoid TSCs; TSM\nLW52\n4486\n8585.5\n2581.0\n\n\nCount\n4\n4\n—\n—\n—\n\n\nMean\n—\n—\n—\n11,934\n3,148\n\n\nSum\n—\n—\n10,842\n—\n—\n\n\n\n\n\n\n\npurrr::reduce(list(\n    p_embedding_stem_batch,\n    p_embedding_stem_UMI,\n    p_embedding_stem_POU5F1\n), `+`) +\n    patchwork::plot_layout(ncol = 3) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nPolishing\n\np_embedding_stem_batch <- plot_embedding(\n    data = embedding_stem[, c(x_column, y_column)],\n    color = embedding_stem$batch |> as.factor(),\n    label = NULL,\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(void = TRUE) +\n    scale_color_manual(\n        values = scales::hue_pal()(n = length(unique(embedding_stem$batch))),\n        labels = c(\n            \"Naïve ES cells\",\n            \"Blastoid Naïve ES cells\",\n            \"Blastoid nEND\",\n            \"Blastoid TSCs\"\n        )\n    )\n\n\nx_label <- ggplot_build(\n    p_embedding_stem_batch\n)$layout$panel_params[[1]][c(\"x.range\")] |>\n    unlist() |>\n    quantile(0.1)\ny_label <- ggplot_build(\n    p_embedding_stem_batch\n)$layout$panel_params[[1]][c(\"y.range\")] |>\n    unlist() |>\n    quantile(0.8)\n\nfeatures_selected <- c(\n    \"ENSG00000181449_SOX2\",\n    \"ENSG00000141448_GATA6\",\n    \"ENSG00000107485_GATA3\"\n)\n\np_embedding_stem_SOX2_GATA6_GATA3 <- purrr::map(features_selected, \\(x) {\n    selected_feature <- x\n\n    plot_embedding(\n        data = embedding_stem[, c(x_column, y_column)],\n        color = log10(\n            calc_cpm(matrix_readcount_use[, embedding_stem$cell])\n            [selected_feature, ] + 1\n        ),\n        label = NULL,\n        color_legend = TRUE,\n        sort_values = TRUE,\n        rasterise = RASTERISED,\n        geom_point_size = 0.5,\n        na_value = \"grey80\"\n    ) +\n        theme_customized_embedding(\n            x = CB_POSITION[1],\n            y = CB_POSITION[2],\n            void = TRUE,\n            legend_key_size = c(1.5, 1.5)\n        ) +\n        ggplot2::annotate(\n            geom = \"text\",\n            x = x_label,\n            y = y_label,\n            label = stringr::str_c(\n                x |> stringr::str_remove(pattern = \"^E.+_\")\n            ),\n            family = \"Arial\",\n            color = \"black\",\n            size = 5 / ggplot2::.pt,\n            hjust = 0,\n            vjust = 0\n            # parse = TRUE\n        )\n})\n\n\nlist(\n    p_embedding_stem_batch,\n    p_embedding_stem_SOX2_GATA6_GATA3\n) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(nrow = 2) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )"
  },
  {
    "objectID": "analyze_blastoids.html#trajectory-inference",
    "href": "analyze_blastoids.html#trajectory-inference",
    "title": "Single Cell Transcriptomes of Human Blastoids",
    "section": "Trajectory inference",
    "text": "Trajectory inference\n\n\n\nData loading\n\nEMBEDDING_FILE <- \"embedding_timecourse.csv.gz\"\n\nembedding_timecourse <- read_csv(\n    file = file.path(PROJECT_DIR, \"github\", \"data\", EMBEDDING_FILE)\n)\n\nrm(EMBEDDING_FILE)\n\n\nMATRIX_DIR <- list(\n    \"github/data/matrices/LW36\",\n    \"github/data/matrices/LW49_LW50_LW51_LW52\",\n    \"github/data/matrices/LW58_LW59\",\n    \"github/data/matrices/LW60_LW61\",\n    \"raw/public/PRJEB11202/reformatted_matrix\"\n)\n\nmatrix_readcount_use <- purrr::map(MATRIX_DIR, \\(x) {\n    load_matrix(file.path(PROJECT_DIR, x))\n}) |>\n    purrr::reduce(cbind)\n\nmatrix_readcount_use <- matrix_readcount_use[, embedding_timecourse$cell]\n\n# clean up\nrm(MATRIX_DIR)\n\nEmbedding visualization\n\nEMBEDDING_TITLE_PREFIX <- \"FIt-SNE\"\n\nx_column <- \"x_fitsne\"\ny_column <- \"y_fitsne\"\n\nClustering & batch & UMI\n\np_embedding_timecourse_cluster <- plot_embedding(\n    data = embedding_timecourse[, c(x_column, y_column)],\n    color = letters[as.integer(embedding_timecourse$louvain + 1)] |>\n        as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Cluster\"),\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_timecourse_batch <- plot_embedding(\n    data = embedding_timecourse[, c(x_column, y_column)],\n    color = embedding_timecourse$batch |> as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Batch\"),\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\nCB_POSITION <- c(0.875, 0.3)\np_embedding_timecourse_UMI <- plot_embedding(\n    data = embedding_timecourse[, c(x_column, y_column)],\n    color = log10(\n        Matrix::colSums(matrix_readcount_use[, embedding_timecourse$cell])\n    ),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; UMI\"),\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(\n        x = CB_POSITION[1],\n        y = CB_POSITION[2]\n    )\n\nselected_feature <- \"ENSG00000204531_POU5F1\"\np_embedding_timecourse_POU5F1 <- plot_embedding(\n    data = embedding_timecourse[, c(x_column, y_column)],\n    color = log10(\n        calc_cpm(matrix_readcount_use[, embedding_timecourse$cell])\n        [selected_feature, ] + 1\n    ),\n    label = glue::glue(\n        \"{EMBEDDING_TITLE_PREFIX}; \",\n        \"{selected_feature |> stringr::str_remove(pattern = \\\"^E.+_\\\")}\"\n    ),\n    color_legend = TRUE,\n    sort_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE,\n    na_value = \"grey80\"\n) +\n    theme_customized_embedding(\n        x = CB_POSITION[1],\n        y = CB_POSITION[2]\n    )\n\n\nlist(\n    p_embedding_timecourse_cluster,\n    p_embedding_timecourse_batch,\n    p_embedding_timecourse_UMI,\n    p_embedding_timecourse_POU5F1\n) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nPolishing\n\np_embedding_timecourse_batch <- plot_embedding(\n    data = embedding_timecourse[, c(x_column, y_column)],\n    color = embedding_timecourse$batch |> as.factor(),\n    label = NULL,\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(void = TRUE) +\n    ggplot2::scale_color_manual(\n        values = yarrr::piratepal(palette = \"google\") |> as.character(),\n        labels = c(\"D3\", \"D6\", \"D9\", \"D9; PXGL\")\n    )\n\n\nembedding_timecourse <- embedding_timecourse |>\n    dplyr::select(cell:y_fitsne) |>\n    dplyr::left_join(\n        embedding |> dplyr::select(cell, louvain_ = louvain),\n        by = c(\"cell\" = \"cell\")\n    ) |>\n    mutate(\n        louvain_ = case_when(\n            is.na(louvain_) ~ \"NA\",\n            TRUE ~ as.character(louvain_)\n        ),\n        #\n        lineage = case_when(\n            louvain_ %in% c(11) ~ \"EPI\",\n            louvain_ %in% c(18) ~ \"HYP\",\n            louvain_ %in% c(0, 1, 8, 9, 12, 17) ~ \"TE\",\n            louvain_ %in% c(10, 14) ~ \"Pre-lineage\",\n            TRUE ~ \"Other\"\n        ),\n        lineage = factor(\n            lineage,\n            levels = c(\"Other\", \"TE\", \"Pre-lineage\", \"HYP\", \"EPI\")\n        ),\n        #\n        cluters_selected = case_when(\n            louvain_ %in% c(2, 3, 4, 5, 6, 7, 13, 15, 16) ~ louvain_,\n            TRUE ~ \"Other\"\n        ),\n        cluters_selected = factor(\n            cluters_selected,\n            levels = c(\n                \"Other\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"13\", \"15\", \"16\"\n            )\n        )\n    )\n\n\np_embedding_timecourse_lineage <- plot_embedding(\n    data = embedding_timecourse[, c(x_column, y_column)],\n    color = embedding_timecourse$lineage |> as.factor(),\n    label = NULL,\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = TRUE,\n    shuffle_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE,\n    na_value = \"grey70\"\n) +\n    ggplot2::scale_color_manual(\n        name = NULL,\n        limits = c(\"TE\", \"Pre-lineage\", \"HYP\", \"EPI\"),\n        values = c(\"grey70\", \"#8ace7e\", \"#ff684c\", \"#9467bd\", \"#ffd8b1\"),\n        breaks = c(\"Other\", \"EPI\", \"HYP\", \"TE\", \"Pre-lineage\"),\n        labels = c(\"Other\", \"ELCs\", \"HLCs\", \"TLCs\", \"Pre-lineage-like\"),\n        guide = ggplot2::guides(\n            color = ggplot2::guide_legend(\n                override.aes = list(\n                    size = 2, alpha = 1\n                ),\n                ncol = 1,\n                reverse = TRUE,\n                order = 1\n            )\n        ),\n        na.value = \"grey70\"\n    ) +\n    theme_customized_embedding(void = TRUE)\n\n\np_embedding_timecourse_cluster <- plot_embedding(\n    data = embedding_timecourse[, c(x_column, y_column)],\n    color = embedding_timecourse$cluters_selected,\n    label = NULL,\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = TRUE,\n    shuffle_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE,\n    geom_point_legend_ncol = 2\n) +\n    ggplot2::scale_color_manual(\n        values = c(\"Other\" = \"grey70\", color_palette_cluster),\n        limits = embedding_timecourse |>\n            dplyr::filter(cluters_selected != \"Other\") |>\n            dplyr::pull(cluters_selected) |>\n            as.character() |>\n            unique() |>\n            stringr::str_sort(numeric = TRUE),\n        na.value = \"grey70\"\n    ) +\n    theme_customized_embedding(void = TRUE) +\n    ggrepel::geom_text_repel(\n        data = get_middle_points(\n            data = embedding_timecourse |>\n                dplyr::filter(cluters_selected != \"Other\"),\n            x = x_column,\n            y = y_column,\n            group = \"cluters_selected\"\n        ),\n        ggplot2::aes(\n            x = x_fitsne,\n            y = y_fitsne,\n            label = cluters_selected\n        ),\n        color = \"black\",\n        size = 1.8,\n        family = \"Arial\",\n        #\n        box.padding = 0.4,\n        point.padding = 1e-06,\n        min.segment.length = 0,\n        arrow = ggplot2::arrow(length = unit(0.015, \"npc\")),\n        max.overlaps = Inf,\n        nudge_x = 0,\n        nudge_y = 10,\n        #\n        segment.color = \"grey35\",\n        segment.size = 0.25,\n        segment.alpha = 1,\n        # segment.inflect = TRUE,\n        seed = 20201121\n    )\n\n\n\n\n\nfeatures_selected <- c(\n    \"ENSG00000181449_SOX2\",\n    \"ENSG00000141448_GATA6\",\n    \"ENSG00000107485_GATA3\"\n)\n\np_embedding_timecourse_SOX2_GATA6_GATA3 <- purrr::map(features_selected, \\(x) {\n    selected_feature <- x\n\n    plot_embedding(\n        data = embedding_timecourse[, c(x_column, y_column)],\n        color = log10(\n            calc_cpm(matrix_readcount_use[, embedding_timecourse$cell])\n            [selected_feature, ] + 1\n        ),\n        label = NULL,\n        color_legend = TRUE,\n        sort_values = TRUE,\n        rasterise = RASTERISED,\n        geom_point_size = 0.5,\n        na_value = \"grey80\"\n    ) +\n        theme_customized_embedding(\n            x = CB_POSITION[1],\n            y = CB_POSITION[2],\n            void = TRUE,\n            legend_key_size = c(1.5, 1.5)\n        ) +\n        ggplot2::annotate(\n            geom = \"text\",\n            x = x_label,\n            y = y_label,\n            label = stringr::str_c(\n                x |> stringr::str_remove(pattern = \"^E.+_\")\n            ),\n            family = \"Arial\",\n            color = \"black\",\n            size = 5 / ggplot2::.pt,\n            hjust = 0.5,\n            vjust = 0\n            # parse = TRUE\n        )\n})\n\n\nc(\n    list(\n        p_embedding_timecourse_batch,\n        p_embedding_timecourse_lineage,\n        p_embedding_timecourse_cluster\n    ),\n    p_embedding_timecourse_SOX2_GATA6_GATA3\n) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2, byrow = FALSE) +\n    patchwork::plot_annotation(\n        theme = theme(plot.margin = margin())\n    )\n\n\n\n\n\n\n\nCluster composition\n\ncalc_group_composition(\n    data = embedding_timecourse,\n    x = \"louvain\",\n    group = \"batch\"\n) |>\n    dplyr::mutate(\n        louvain = as.factor(louvain)\n    ) |>\n    plot_barplot(\n        x = \"louvain\",\n        y = \"percentage\",\n        z = \"batch\"\n    ) +\n    ggplot2::scale_fill_manual(\n        values = yarrr::piratepal(palette = \"google\") %>% as.character(),\n        labels = c(\"D3\", \"D6\", \"D9\", \"D9; PXGL\")\n    ) +\n    ggplot2::guides(fill = ggplot2::guide_legend(direction = \"horizontal\")) +\n    ggplot2::theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "analyze_blastoids.html#r-session-info",
    "href": "analyze_blastoids.html#r-session-info",
    "title": "Single Cell Transcriptomes of Human Blastoids",
    "section": "R session info",
    "text": "R session info\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Monterey 12.6\n system   aarch64, darwin21.6.0\n ui       unknown\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-09-25\n pandoc   2.19.2 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package        * version       date (UTC) lib source\n BayesFactor      0.9.12-4.4    2022-07-05 [1] CRAN (R 4.2.1)\n BiocGenerics     0.42.0        2022-04-26 [1] Bioconductor\n bit              4.0.4         2020-08-04 [1] CRAN (R 4.2.0)\n bit64            4.0.5         2020-08-30 [1] CRAN (R 4.2.0)\n cachem           1.0.6         2021-08-19 [1] CRAN (R 4.2.0)\n Cairo            1.6-0         2022-07-05 [1] CRAN (R 4.2.1)\n callr            3.7.2         2022-08-22 [1] CRAN (R 4.2.1)\n circlize         0.4.15        2022-05-10 [1] CRAN (R 4.2.0)\n cli              3.4.1         2022-09-23 [1] CRAN (R 4.2.1)\n clue             0.3-61        2022-05-30 [1] CRAN (R 4.2.0)\n cluster          2.1.4         2022-08-22 [2] CRAN (R 4.2.1)\n coda             0.19-4        2020-09-30 [1] CRAN (R 4.2.0)\n codetools        0.2-18        2020-11-04 [2] CRAN (R 4.2.1)\n colorspace       2.0-3         2022-02-21 [1] CRAN (R 4.2.0)\n commonmark       1.8.0         2022-03-09 [1] CRAN (R 4.2.0)\n ComplexHeatmap   2.12.1        2022-08-09 [1] Bioconductor\n crayon           1.5.1         2022-03-26 [1] CRAN (R 4.2.0)\n devtools         2.4.4.9000    2022-09-23 [1] Github (r-lib/devtools@9e2793a)\n digest           0.6.29        2021-12-01 [1] CRAN (R 4.2.0)\n doParallel       1.0.17        2022-02-07 [1] CRAN (R 4.2.0)\n dplyr          * 1.0.99.9000   2022-09-23 [1] Github (tidyverse/dplyr@19c2be3)\n ellipsis         0.3.2         2021-04-29 [1] CRAN (R 4.2.0)\n evaluate         0.16          2022-08-09 [1] CRAN (R 4.2.1)\n extrafont      * 0.18          2022-04-12 [1] CRAN (R 4.2.0)\n extrafontdb      1.0           2012-06-11 [1] CRAN (R 4.2.0)\n fansi            1.0.3         2022-03-24 [1] CRAN (R 4.2.0)\n farver           2.1.1         2022-07-06 [1] CRAN (R 4.2.1)\n fastmap          1.1.0         2021-01-25 [1] CRAN (R 4.2.0)\n forcats        * 0.5.2.9000    2022-08-20 [1] Github (tidyverse/forcats@bd319e0)\n foreach          1.5.2         2022-02-02 [1] CRAN (R 4.2.0)\n fs               1.5.2.9000    2022-08-24 [1] Github (r-lib/fs@238032f)\n generics         0.1.3         2022-07-05 [1] CRAN (R 4.2.1)\n GetoptLong       1.0.5         2020-12-15 [1] CRAN (R 4.2.0)\n ggplot2        * 3.3.6.9000    2022-09-12 [1] Github (tidyverse/ggplot2@a58b48c)\n ggrepel          0.9.1         2021-01-15 [1] CRAN (R 4.2.0)\n ggthemes         4.2.4         2021-01-20 [1] CRAN (R 4.2.0)\n GlobalOptions    0.1.2         2020-06-10 [1] CRAN (R 4.2.0)\n glue             1.6.2.9000    2022-04-22 [1] Github (tidyverse/glue@d47d6c7)\n gridExtra        2.3           2017-09-09 [1] CRAN (R 4.2.0)\n gt               0.7.0.9000    2022-09-23 [1] Github (rstudio/gt@4030fb7)\n gtable           0.3.1.9000    2022-09-01 [1] Github (r-lib/gtable@c1a7a81)\n hms              1.1.2         2022-08-19 [1] CRAN (R 4.2.1)\n htmltools        0.5.3         2022-07-18 [1] CRAN (R 4.2.1)\n htmlwidgets      1.5.4         2022-08-23 [1] Github (ramnathv/htmlwidgets@400cf1a)\n httpuv           1.6.6         2022-09-08 [1] CRAN (R 4.2.1)\n IRanges          2.30.1        2022-08-18 [1] Bioconductor\n iterators        1.0.14        2022-02-05 [1] CRAN (R 4.2.0)\n jpeg             0.1-9         2021-07-24 [1] CRAN (R 4.2.0)\n jsonlite         1.8.0         2022-02-22 [1] CRAN (R 4.2.0)\n knitr            1.40          2022-08-24 [1] CRAN (R 4.2.1)\n labeling         0.4.2         2020-10-20 [1] CRAN (R 4.2.0)\n later            1.3.0         2021-08-18 [1] CRAN (R 4.2.0)\n lattice          0.20-45       2021-09-22 [2] CRAN (R 4.2.1)\n lifecycle        1.0.2.9000    2022-09-23 [1] Github (r-lib/lifecycle@0a6860a)\n lubridate      * 1.8.0.9000    2022-05-24 [1] Github (tidyverse/lubridate@0bb49b2)\n magick           2.7.3         2021-08-18 [1] CRAN (R 4.2.0)\n magrittr         2.0.3         2022-03-30 [1] CRAN (R 4.2.0)\n Matrix         * 1.5-1         2022-09-13 [1] CRAN (R 4.2.1)\n MatrixModels     0.5-1         2022-09-11 [1] CRAN (R 4.2.1)\n matrixStats      0.62.0        2022-04-19 [1] CRAN (R 4.2.0)\n memoise          2.0.1         2021-11-26 [1] CRAN (R 4.2.0)\n mime             0.12          2021-09-28 [1] CRAN (R 4.2.0)\n miniUI           0.1.1.1       2018-05-18 [1] CRAN (R 4.2.0)\n munsell          0.5.0         2018-06-12 [1] CRAN (R 4.2.0)\n mvtnorm          1.1-3         2021-10-08 [1] CRAN (R 4.2.1)\n patchwork      * 1.1.2.9000    2022-08-20 [1] Github (thomasp85/patchwork@c14c960)\n pbapply          1.5-0         2021-09-16 [1] CRAN (R 4.2.0)\n pillar           1.8.1         2022-08-19 [1] CRAN (R 4.2.1)\n pkgbuild         1.3.1         2021-12-20 [1] CRAN (R 4.2.0)\n pkgconfig        2.0.3         2019-09-22 [1] CRAN (R 4.2.0)\n pkgload          1.3.0         2022-06-27 [1] CRAN (R 4.2.1)\n png              0.1-7         2013-12-03 [1] CRAN (R 4.2.0)\n prettyunits      1.1.1.9000    2022-04-22 [1] Github (r-lib/prettyunits@8706d89)\n processx         3.7.0         2022-07-07 [1] CRAN (R 4.2.1)\n profvis          0.3.7         2020-11-02 [1] CRAN (R 4.2.0)\n promises         1.2.0.1       2021-02-11 [1] CRAN (R 4.2.0)\n ps               1.7.1         2022-06-18 [1] CRAN (R 4.2.0)\n purrr          * 0.9000.0.9000 2022-09-24 [1] Github (tidyverse/purrr@4ab13f5)\n R.cache          0.16.0        2022-07-21 [1] CRAN (R 4.2.1)\n R.methodsS3      1.8.2         2022-06-13 [1] CRAN (R 4.2.0)\n R.oo             1.25.0        2022-06-12 [1] CRAN (R 4.2.0)\n R.utils          2.12.0        2022-06-28 [1] CRAN (R 4.2.1)\n R6               2.5.1.9000    2022-08-04 [1] Github (r-lib/R6@87d5e45)\n ragg             1.2.2.9000    2022-09-12 [1] Github (r-lib/ragg@904e145)\n RColorBrewer     1.1-3         2022-04-03 [1] CRAN (R 4.2.0)\n Rcpp             1.0.9         2022-07-08 [1] CRAN (R 4.2.1)\n readr          * 2.1.2.9000    2022-09-20 [1] Github (tidyverse/readr@5cac6ed)\n remotes          2.4.2         2022-09-12 [1] Github (r-lib/remotes@bc0949d)\n reticulate       1.26          2022-08-31 [1] CRAN (R 4.2.1)\n rjson            0.2.21        2022-01-09 [1] CRAN (R 4.2.0)\n rlang            1.0.6         2022-09-24 [1] Github (r-lib/rlang@66454bd)\n rmarkdown        2.16.1        2022-09-24 [1] Github (rstudio/rmarkdown@9577707)\n Rttf2pt1         1.3.10        2022-02-07 [1] CRAN (R 4.2.0)\n S4Vectors        0.34.0        2022-04-26 [1] Bioconductor\n sass             0.4.2         2022-07-16 [1] CRAN (R 4.2.1)\n scales           1.2.1.9000    2022-08-20 [1] Github (r-lib/scales@b3df2fb)\n sessioninfo      1.2.2         2021-12-06 [1] CRAN (R 4.2.0)\n shape            1.4.6         2021-05-19 [1] CRAN (R 4.2.0)\n shiny            1.7.2         2022-07-19 [1] CRAN (R 4.2.1)\n stringi          1.7.8         2022-07-11 [1] CRAN (R 4.2.1)\n stringr        * 1.4.1.9000    2022-08-21 [1] Github (tidyverse/stringr@792bc92)\n styler         * 1.7.0.9002    2022-09-21 [1] Github (r-lib/styler@1f4437b)\n systemfonts      1.0.4         2022-02-11 [1] CRAN (R 4.2.0)\n textshaping      0.3.6         2021-10-13 [1] CRAN (R 4.2.0)\n tibble         * 3.1.8.9002    2022-09-24 [1] Github (tidyverse/tibble@e9db4f4)\n tidyr          * 1.2.1.9000    2022-09-09 [1] Github (tidyverse/tidyr@653def2)\n tidyselect       1.1.2.9000    2022-09-21 [1] Github (r-lib/tidyselect@edd0a3b)\n tidyverse      * 1.3.2.9000    2022-09-12 [1] Github (tidyverse/tidyverse@3be8283)\n tzdb             0.3.0         2022-03-28 [1] CRAN (R 4.2.0)\n urlchecker       1.0.1         2021-11-30 [1] CRAN (R 4.2.0)\n usethis          2.1.6.9000    2022-09-23 [1] Github (r-lib/usethis@8ecb7ab)\n utf8             1.2.2         2021-07-24 [1] CRAN (R 4.2.0)\n vctrs            0.4.1.9000    2022-09-19 [1] Github (r-lib/vctrs@0a219ba)\n viridis          0.6.2         2021-10-13 [1] CRAN (R 4.2.0)\n viridisLite      0.4.1         2022-08-22 [1] CRAN (R 4.2.1)\n vroom            1.5.7.9000    2022-09-09 [1] Github (r-lib/vroom@0c2423e)\n withr            2.5.0         2022-03-03 [1] CRAN (R 4.2.0)\n xfun             0.33          2022-09-12 [1] CRAN (R 4.2.1)\n xtable           1.8-4         2019-04-21 [1] CRAN (R 4.2.0)\n yaml             2.3.5         2022-02-21 [1] CRAN (R 4.2.0)\n yarrr            0.1.6         2022-04-22 [1] Github (ndphillips/yarrr@e2e4488)\n\n [1] /opt/homebrew/lib/R/4.2/site-library\n [2] /opt/homebrew/Cellar/r/4.2.1_4/lib/R/library\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         /Users/jialei/.pyenv/shims/python\n libpython:      /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/libpython3.9.dylib\n pythonhome:     /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10:/Users/jialei/.pyenv/versions/mambaforge-4.10.3-10\n version:        3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:00:33)  [Clang 13.0.1 ]\n numpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n numpy_version:  1.22.4\n numpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n \n NOTE: Python version was forced by RETICULATE_PYTHON\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "compare_blastoids.html",
    "href": "compare_blastoids.html",
    "title": "Comparative Analysis of Single Cell Transcriptomes of Human Blastoids",
    "section": "",
    "text": "In this manuscript, several transcriptome data sets generated by different technologies were included. To minimize platform and processing differences, raw fastq files of public datasets using the Illumina sequencing platform were downloaded and re-processed."
  },
  {
    "objectID": "compare_blastoids.html#preparation",
    "href": "compare_blastoids.html#preparation",
    "title": "Comparative Analysis of Single Cell Transcriptomes of Human Blastoids",
    "section": "Preparation",
    "text": "Preparation\nFunctions\n\n\n\nLoad required packages.\n\nlibrary(tidyverse)\nlibrary(Matrix)\nlibrary(patchwork)\nlibrary(extrafont)\n\n\nsource(\n    file = file.path(\n        SCRIPT_DIR,\n        \"utilities.R\"\n    )\n)\n\nload_matrix <- function(x) {\n    matrix_readcount_use <- scipy$sparse$load_npz(\n        file.path(x, \"matrix_readcount.npz\")\n    )\n    colnames(matrix_readcount_use) <- np$load(\n        file.path(x, \"matrix_readcount_barcodes.npy\")\n    )\n    rownames(matrix_readcount_use) <- np$load(\n        file.path(x, \"matrix_readcount_features.npy\")\n    )\n\n    return(matrix_readcount_use)\n}\n\nperform_pca <- function(matrix, features, min_counts = 1) {\n    matrix_norm <- matrix[\n        Matrix::rowSums(\n            matrix\n        ) >= min_counts,\n    ]\n\n    matrix_norm <- as(matrix_norm, \"dgCMatrix\")\n    matrix_norm@x <- median(colSums(matrix_norm)) *\n        (matrix_norm@x / rep.int(\n            colSums(matrix_norm),\n            diff(matrix_norm@p)\n        ))\n\n    matrix_norm_log <- matrix_norm[\n        rownames(matrix_norm) %in% features,\n    ]\n    matrix_norm_log@x <- log1p(matrix_norm_log@x)\n\n    # z-score\n    matrix_norm_log_scaled <- t(\n        scale(\n            t(\n                matrix_norm_log\n            ),\n            center = TRUE, scale = TRUE\n        )\n    )\n\n    # PCA\n    pca_out <- prcomp(\n        t(matrix_norm_log_scaled),\n        center = FALSE,\n        scale = FALSE\n    )\n\n    return(pca_out)\n}\n\n\n\n\nPython env\n\nnp <- reticulate::import(\"numpy\", convert = TRUE)\nscipy <- reticulate::import(module = \"scipy\", convert = TRUE)\nad <- reticulate::import(module = \"anndata\", convert = TRUE)\n\n\nreticulate::py_config()\n\npython:         /Users/jialei/.pyenv/shims/python\nlibpython:      /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/libpython3.9.dylib\npythonhome:     /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10:/Users/jialei/.pyenv/versions/mambaforge-4.10.3-10\nversion:        3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:00:33)  [Clang 13.0.1 ]\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\nnumpy_version:  1.22.4\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n\nNOTE: Python version was forced by RETICULATE_PYTHON\n\n\n\ncat(\"numpy:\", np$`__version__`, \"\\n\")\n## numpy: 1.22.4\ncat(\"scipy:\", scipy$`__version__`, \"\\n\")\n## scipy: 1.9.1\ncat(\"anndata:\", ad$`__version__`, \"\\n\")\n## anndata: 0.8.0\n\n\nPROJECT_DIR <- \"/Users/jialei/Dropbox/Data/Projects/UTSW/Human_blastoid\"\n\nMatrix\n\n\n\n\nMATRIX_DIR <- list(\n    \"github/data/matrices/LW36\",\n    \"github/data/matrices/LW49_LW50_LW51_LW52\",\n    \"github/data/matrices/LW58_LW59\",\n    \"github/data/matrices/LW60_LW61\",\n    \"raw/public/PRJEB11202/reformatted_matrix\"\n)\n\nmatrix_readcount_use <- purrr::map(MATRIX_DIR, \\(x) {\n    load_matrix(file.path(PROJECT_DIR, x))\n}) |>\n    purrr::reduce(cbind)\n\n# clean up\nrm(MATRIX_DIR)\n\nEmbedding\n\nEMBEDDING_FILE <- \"embedding.csv.gz\"\n\nembedding <- read_csv(\n    file = file.path(\n        PROJECT_DIR,\n        \"github\",\n        \"data\",\n        EMBEDDING_FILE\n    )\n)\n\n# clean up\nrm(EMBEDDING_FILE)\n\nMetadata\n\ncell_metadata_PRJEB11202 <- read_delim(\n    file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJEB11202/\",\n        \"E-MTAB-3929.sdrf.tsv\"\n    ),\n    delim = \"\\t\"\n) |>\n    dplyr::select(\n        `Comment[ENA_SAMPLE]`,\n        `Comment[ENA_RUN]`,\n        `Characteristics[developmental stage]`,\n        `Characteristics[inferred lineage]`\n    ) |>\n    dplyr::rename(\n        cell = `Comment[ENA_SAMPLE]`,\n        run = `Comment[ENA_RUN]`,\n        developmental_stage = `Characteristics[developmental stage]`,\n        lineage = `Characteristics[inferred lineage]`\n    ) |>\n    dplyr::mutate(\n        developmental_stage = stringr::str_replace(\n            string = developmental_stage,\n            pattern = \"embryonic day \",\n            replacement = \"E\"\n        ),\n        lineage = dplyr::case_when(\n            lineage == \"epiblast\" ~ \"EPI\",\n            lineage == \"primitive endoderm\" ~ \"HYP\",\n            lineage == \"trophectoderm\" ~ \"TE\",\n            lineage == \"not applicable\" ~ \"Pre-lineage\"\n        )\n    )\n\nembedding <- embedding |>\n    dplyr::left_join(\n        cell_metadata_PRJEB11202\n    ) |>\n    dplyr::mutate(\n        lineage = dplyr::case_when(\n            is.na(lineage) ~ \"Blastoid\",\n            TRUE ~ as.character(lineage)\n        ),\n        developmental_stage = dplyr::case_when(\n            is.na(developmental_stage) ~ \"Blastoid\",\n            TRUE ~ as.character(developmental_stage)\n        )\n    )\n\n\nwalk(list(matrix_readcount_use), \\(x) {\n    print(object.size(x), units = \"auto\", standard = \"SI\")\n})\n\n1.6 GB"
  },
  {
    "objectID": "compare_blastoids.html#prepost-implantation-comparison",
    "href": "compare_blastoids.html#prepost-implantation-comparison",
    "title": "Comparative Analysis of Single Cell Transcriptomes of Human Blastoids",
    "section": "Pre/post-implantation comparison",
    "text": "Pre/post-implantation comparison\n\n\n\nBlastoid\n\nmatrix_readcount_blastoid_pseudobulk <- purrr::map(\n    sort(unique(embedding$louvain)), \\(x) {\n        cells_in_group <- embedding |>\n            dplyr::filter(\n                louvain == x,\n                batch != \"PRJEB11202\"\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_use[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(sort(unique(embedding$louvain)))\n\n\nEMBEDDING_FILE <- \"embedding_stem.csv.gz\"\n\nembedding_stem <- read_csv(\n    file = file.path(\n        PROJECT_DIR,\n        \"github\",\n        \"data\",\n        EMBEDDING_FILE\n    )\n)\n\nmatrix_readcount_stem_pseudobulk <- purrr::map(\n    sort(unique(embedding_stem$batch)), \\(x) {\n        cells_in_group <- embedding_stem |>\n            dplyr::filter(batch == x) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_use[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(sort(unique(embedding_stem$batch)))\n\nPublic datasets\nPetropoulos et al\nSingle-cell RNA-Seq reveals lineage and X chromosome dynamics in human preimplantation embryos\n\nBioProject Accession: PRJEB11202\nArrayExpress: E-MTAB-3929\nNotebook: https://jlduan.github.io/replica/j.cell.2016.03.023\n\n\n\n\n\n\nmatrix_readcount_PRJEB11202_pseudobulk_EPI <- purrr::map(\n    c(\"E5\", \"E6\", \"E7\"), \\(x) {\n        cells_in_group <- embedding |>\n            dplyr::filter(\n                lineage == \"EPI\",\n                developmental_stage == x\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_use[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(c(\"E5\", \"E6\", \"E7\")) |>\n    as.matrix()\n\nmatrix_readcount_PRJEB11202_pseudobulk_TE <- purrr::map(\n    c(\"E5\", \"E6\", \"E7\"), \\(x) {\n        cells_in_group <- embedding |>\n            dplyr::filter(\n                lineage == \"TE\",\n                developmental_stage == x\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_use[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(c(\"E5\", \"E6\", \"E7\")) |>\n    as.matrix()\n\nmatrix_readcount_PRJEB11202_pseudobulk_HYP <- purrr::map(\n    c(\"E5\", \"E6\", \"E7\"), \\(x) {\n        cells_in_group <- embedding |>\n            dplyr::filter(\n                lineage == \"HYP\",\n                developmental_stage == x\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_use[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(c(\"E5\", \"E6\", \"E7\")) |>\n    as.matrix()\n\nXiang et al\nA developmental landscape of 3D-cultured human pre-gastrulation embryos\n\nBioProject Accession: PRJNA562548\nGEO Accession: GSE136447\nNotebook: https://jlduan.github.io/replica/s41586-019-1875-y\n\n\n\n\n\n\nadata_files <- c(\n    file.path(\n        MATRIX_DIR,\n        \"adata.h5ad\"\n    )\n)\n\nBACKED <- NULL\nmatrix_readcount_PRJNA562548 <- purrr::map(adata_files, \\(x) {\n    ad$read_h5ad(\n        filename = x, backed = BACKED\n    ) |>\n        convert_adata()\n}) |>\n    purrr::reduce(cbind)\n\n\ncell_metadata_PRJNA562548 <- vroom::vroom(\n    file = file.path(\n        MATRIX_DIR, \"cell_metadata.csv\"\n    )\n) |>\n    dplyr::select(\n        cell = `Sample Name`,\n        developmental_stage = Age,\n        lineage = Cell_type,\n        run = Run\n    ) |>\n    dplyr::mutate(\n        developmental_stage = stringr::str_replace(\n            string = developmental_stage,\n            pattern = \"embryo invitro day \",\n            replacement = \"E\"\n        ),\n        developmental_stage = factor(\n            developmental_stage,\n            levels = stringr::str_sort(\n                x = unique(developmental_stage),\n                numeric = TRUE\n            )\n        ),\n        lineage = factor(\n            lineage,\n            levels = c(\n                \"ICM\",\n                \"EPI\",\n                \"PSA-EPI\",\n                \"Hypoblast\",\n                \"CTBs\",\n                \"STBs\",\n                \"EVTs\"\n            )\n        )\n    )\n\n\nmatrix_readcount_PRJNA562548_pseudobulk_EPI <- purrr::map(\n    levels(cell_metadata_PRJNA562548$developmental_stage), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA562548 |>\n            dplyr::filter(\n                lineage == \"EPI\",\n                developmental_stage == x\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_PRJNA562548[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(cell_metadata_PRJNA562548$developmental_stage)) |>\n    as.matrix()\n\nmatrix_readcount_PRJNA562548_pseudobulk_HYP <- purrr::map(\n    levels(cell_metadata_PRJNA562548$developmental_stage), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA562548 |>\n            dplyr::filter(\n                lineage == \"Hypoblast\",\n                developmental_stage == x\n            ) |>\n            dplyr::pull(cell)\n\n        if (length(cells_in_group) > 1) {\n            m <- Matrix::rowSums(matrix_readcount_PRJNA562548[, cells_in_group])\n        } else {\n            m <- matrix_readcount_PRJNA562548[, cells_in_group]\n        }\n\n        return(m)\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(\n        cell_metadata_PRJNA562548 |>\n            dplyr::filter(lineage == \"Hypoblast\") |>\n            dplyr::pull(developmental_stage) |>\n            droplevels() |>\n            levels()\n    ) |>\n    as.matrix()\n\n# clean up\nrm(matrix_readcount_PRJNA562548)\nrm(cell_metadata_PRJNA562548)\n\nZhou et al\nReconstituting the transcriptome and DNA methylome landscapes of human implantation\n\nBioProject Accession: PRJNA431392\nGEO Accession: GSE109555\nNotebook: https://jlduan.github.io/replica/s41586-019-1500-0\n\n\n\n\n\n\nadata_files <- c(\n    file.path(\n        MATRIX_DIR,\n        \"adata.h5ad\"\n    )\n)\n\nBACKED <- NULL\nmatrix_readcount_PRJNA431392 <- purrr::map(adata_files, \\(x) {\n    ad$read_h5ad(\n        filename = x, backed = BACKED\n    ) |>\n        convert_adata()\n}) |>\n    purrr::reduce(cbind)\n\n\nembryos_selected_PRJNA431392 <- c(\n    \"ha_D6_E2\",\n    \"hm_D6_E1\",\n    \"hm_D6_E2\",\n    \"hm_D8_E2\",\n    \"hm_D8_E3\",\n    \"hm_D8_E5\",\n    \"ha_D8_E1\",\n    \"hm_D8_E1\",\n    \"hv_D8_E1\",\n    \"hv_D8_E2\",\n    \"hv_D8_E3\",\n    \"hv_D10_E6\",\n    \"ha_D10_E1\",\n    \"ha_D10_E2\",\n    \"hm_D10_E4\",\n    \"hm_D10_E9\",\n    \"hv_D10_E7\",\n    \"hv_D10_E8\",\n    \"ha_D12_E1\",\n    \"hv_D12_E1\",\n    \"hv_D12_E2\"\n)\n\ncell_metadata_PRJNA431392 <- vroom::vroom(\n    file = file.path(\n        MATRIX_DIR, \"cell_metadata.csv\"\n    )\n) |>\n    dplyr::mutate(\n        developmental_stage = str_replace(\n            string = Day,\n            pattern = \"D\",\n            replacement = \"E\"\n        ),\n        developmental_stage = factor(\n            developmental_stage,\n            levels = stringr::str_sort(\n                unique(developmental_stage),\n                numeric = TRUE\n            )\n        ),\n        lineage = factor(\n            Lineage,\n            levels = c(\n                \"EPI\",\n                \"PE\",\n                \"TE\",\n                \"MIX\"\n            )\n        ),\n        `3184` = case_when(\n            Ori_Day_Emb %in% embryos_selected_PRJNA431392 ~ \"1\",\n            TRUE ~ \"0\"\n        )\n    ) |>\n    dplyr::rename(cell = Sample)\n\ncell_metadata_PRJNA431392 <- cell_metadata_PRJNA431392 |>\n    dplyr::filter(`3184` == 1) |>\n    dplyr::mutate(developmental_stage = droplevels(developmental_stage))\n\n\nmatrix_readcount_PRJNA431392_pseudobulk_EPI <- purrr::map(\n    levels(cell_metadata_PRJNA431392$developmental_stage), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA431392 |>\n            dplyr::filter(\n                developmental_stage == x,\n                lineage == \"EPI\"\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_PRJNA431392[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(cell_metadata_PRJNA431392$developmental_stage)) |>\n    as.matrix()\n\nmatrix_readcount_PRJNA431392_pseudobulk_TE <- purrr::map(\n    levels(cell_metadata_PRJNA431392$developmental_stage), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA431392 |>\n            dplyr::filter(\n                developmental_stage == x,\n                lineage == \"TE\"\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_PRJNA431392[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(cell_metadata_PRJNA431392$developmental_stage)) |>\n    as.matrix()\n\nmatrix_readcount_PRJNA431392_pseudobulk_HYP <- purrr::map(\n    levels(cell_metadata_PRJNA431392$developmental_stage), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA431392 |>\n            dplyr::filter(\n                developmental_stage == x,\n                lineage == \"PE\"\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowSums(matrix_readcount_PRJNA431392[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(cell_metadata_PRJNA431392$developmental_stage)) |>\n    as.matrix()\n\n# clean up\nrm(matrix_readcount_PRJNA431392)\nrm(cell_metadata_PRJNA431392)\n\nTakashima et al\nResetting transcription factor control circuitry toward ground-state pluripotency in human\n\nBioProject Accession: PRJEB7132\nArrayExpress Accession: E-MTAB-2857\nNotebook: https://jlduan.github.io/replica/j.cell.2014.08.029\n\n\n\nmatrix_readcount_PRJEB7132 <- load_matrix(\n    file.path(PROJECT_DIR, \"raw/public/PRJEB7132\")\n)\n\nmatrix_readcount_PRJEB7132_pseudobulk <- cbind(\n    H9 = Matrix::rowSums(\n        matrix_readcount_PRJEB7132[, c(\"ERS537888\", \"ERS537890\", \"ERS537878\")]\n    ),\n    H9_reset = Matrix::rowSums(\n        matrix_readcount_PRJEB7132[, c(\"ERS537884\", \"ERS537881\", \"ERS537876\")]\n    )\n) |>\n    as.matrix()\n\n# clean up\nrm(matrix_readcount_PRJEB7132)\n\nDong et al\nDerivation of trophoblast stem cells from naïve human pluripotent stem cells\n\nBioProject Accession: PRJNA576801\nGEO Accession: GSE138688\nNotebook: https://jlduan.github.io/replica/eLife.52504\n\n\n\nmatrix_readcount_PRJNA576801 <- load_matrix(\n    file.path(PROJECT_DIR, \"raw/public/PRJNA576801\")\n)\n\ngeo_info_PRJNA576801 <- tibble::tribble(\n    ~sample_name, ~sample_annotation, ~group, ~cell_line,\n    # \"GSM4116149\", \"H9 primed TSC Bulk RNA-seq\", \"Primed hPSC (hTSC medium)\", \"H9\",\n    # \"GSM4116150\", \"AN primed TSC Bulk RNA-seq\", \"Primed hPSC (hTSC medium)\", \"AN\",\n    \"GSM4116151\", \"H9 primed Bulk RNA-seq\", \"Primed hPSC\", \"H9\",\n    \"GSM4116152\", \"AN primed Bulk RNA-seq\", \"Primed hPSC\", \"AN\",\n    # \"GSM4116153\", \"H9 primed StemPro Bulk RNA-seq\", \"Re-primed hPSC\", \"H9\",\n    # \"GSM4116154\", \"H9 capacitated 1 Bulk RNA-seq\", \"Capacitated hPSC\", \"H9\",\n    # \"GSM4116155\", \"H9 capacitated 2 Bulk RNA-seq\", \"Capacitated hPSC\", \"H9\",\n    \"GSM4116156\", \"H9 naïve Bulk RNA-seq\", \"Naïve hPSC\", \"H9\",\n    \"GSM4116157\", \"AN naïve Bulk RNA-seq\", \"Naïve hPSC\", \"AN\",\n    \"GSM4116158\", \"H9 naïve TSC Bulk RNA-seq\", \"Naïve hTSC\", \"H9\",\n    \"GSM4116159\", \"AN naïve TSC Bulk RNA-seq\", \"Naïve hTSC\", \"AN\",\n    \"GSM4116160\", \"WIBR3 naïve TSC Bulk RNA-seq\", \"Naïve hTSC\", \"WIBR3\",\n    # \"GSM4116161\", \"H9 EVT Bulk RNA-seq\", \"EVT\", \"H9\",\n    # \"GSM4116162\", \"AN EVT Bulk RNA-seq\", \"EVT\", \"AN\",\n    # \"GSM4116163\", \"H9 STB Bulk RNA-seq\", \"STB\", \"H9\",\n    # \"GSM4116164\", \"AN STB Bulk RNA-seq\", \"STB\", \"AN\",\n    \"GSM4276363\", \"H9 naïve TSC rep 2 Bulk RNA-seq\", \"Naïve hTSC\", \"H9\",\n    \"GSM4276364\", \"AN naïve TSC rep 2 Bulk RNA-seq\", \"Naïve hTSC\", \"AN\",\n    # \"GSM4276365\", \"BT5 hTSC rep 1 Bulk RNA-seq\", \"BT5 hTSCs\", \"BT5\",\n    # \"GSM4276366\", \"BT5 hTSC rep 2 Bulk RNA-seq\", \"BT5 hTSCs\", \"BT5\"\n)\n\ncell_metadata_PRJNA576801 <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJNA576801\",\n        \"SraRunTable.txt\"\n    ),\n    delim = \",\"\n) |>\n    dplyr::select(\n        sample_name = \"Sample Name\",\n        run = \"Run\",\n        biosample = \"BioSample\",\n        source_name\n    ) |>\n    dplyr::mutate(\n        source_name = stringr::str_remove(\n            string = source_name, pattern = \"\\\\s.+$\"\n        ),\n        source_name = factor(\n            source_name,\n            levels = c(\"hPSC\", \"hTSC\", \"EVT\", \"STB\"),\n        )\n    ) |>\n    dplyr::left_join(geo_info_PRJNA576801) |>\n    dplyr::mutate(cell_line = factor(cell_line)) |>\n    tidyr::drop_na() |>\n    dplyr::mutate(group = factor(group))\n\n\nmatrix_readcount_PRJNA576801_pseudobulk_lineage <- purrr::map(\n    levels(cell_metadata_PRJNA576801$group), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA576801 |>\n            dplyr::filter(\n                group == x\n            ) |>\n            dplyr::pull(sample_name)\n\n        Matrix::rowSums(matrix_readcount_PRJNA576801[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(cell_metadata_PRJNA576801$group)) |>\n    as.matrix()\n\n\ncolnames(matrix_readcount_PRJNA576801_pseudobulk_lineage) <-\n    stringr::str_replace(\n        string = colnames(matrix_readcount_PRJNA576801_pseudobulk_lineage),\n        pattern = \" \", replacement = \"_\"\n    )\n\nrm(matrix_readcount_PRJNA576801)\nrm(geo_info_PRJNA576801)\nrm(cell_metadata_PRJNA576801)\n\nCinkornpumin et al\nNaïve human embryonic stem cells can give rise to cells with a trophoblast-like transcriptome and methylome\n\nBioProject Accession: PRJNA638350\nGEO Accession: GSE152101\nNotebook: https://jlduan.github.io/replica/j.stemcr.2020.06.003\n\n\n\nmatrix_readcount_PRJNA638350 <- load_matrix(\n    file.path(PROJECT_DIR, \"raw/public/PRJNA638350\")\n)\n\ngeo_info_PRJNA638350 <- tibble::tribble(\n    ~cell, ~sample_description, ~source_name2, ~group, ~cell_line,\n    \"GSM4603117\", \"BT2 hTSC Rep1\", \"BT2 hTSC\", \"hTSC\", \"BT2\",\n    \"GSM4603118\", \"BT2 hTSC Rep2\", \"BT2 hTSC\", \"hTSC\", \"BT2\",\n    \"GSM4603119\", \"BT2 hTSC Rep3\", \"BT2 hTSC\", \"hTSC\", \"BT2\",\n    \"GSM4603120\", \"BT2 hTSC Rep4\", \"BT2 hTSC\", \"hTSC\", \"BT2\",\n    \"GSM4603121\", \"CT1 hTSCs Rep1\", \"CT1 hTSC\", \"hTSC\", \"CT1\",\n    \"GSM4603122\", \"CT1 hTSCs Rep2\", \"CT1 hTSC\", \"hTSC\", \"CT1\",\n    \"GSM4603123\", \"CT1 hTSCs Rep3\", \"CT1 hTSC\", \"hTSC\", \"CT1\",\n    \"GSM4603124\", \"CT1 hTSCs Rep4\", \"CT1 hTSC\", \"hTSC\", \"CT1\",\n    \"GSM4603125\", \"CT1 hTSCs Rep5\", \"CT1 hTSC\", \"hTSC\", \"CT1\",\n    \"GSM4603126\", \"CT1 hTSCs Rep6\", \"CT1 hTSC\", \"hTSC\", \"CT1\",\n    \"GSM4603127\", \"CT1 hTSCs Rep7\", \"CT1 hTSC\", \"hTSC\", \"CT1\",\n    \"GSM4603128\", \"CT3 hTSCs Rep1\", \"CT3 hTSC\", \"hTSC\", \"CT3\",\n    \"GSM4603129\", \"CT3 hTSCs Rep2\", \"CT3 hTSC\", \"hTSC\", \"CT3\",\n    \"GSM4603130\", \"CT3 hTSCs Rep3\", \"CT3 hTSC\", \"hTSC\", \"CT3\",\n    \"GSM4603131\", \"CT3 hTSCs Rep4\", \"CT3 hTSC\", \"hTSC\", \"CT3\",\n    # \"GSM4603132\", \"UCLA1 Primed hESCs Rep1\", \"UCLA1 Primed hESC\", \"Primed hESC\", \"UCLA1\",\n    # \"GSM4603133\", \"UCLA1 Primed hESCs Rep2\", \"UCLA1 Primed hESC\", \"Primed hESC\", \"UCLA1\",\n    # \"GSM4603134\", \"UCLA1 Primed hESCs Rep3\", \"UCLA1 Primed hESC\", \"Primed hESC\", \"UCLA1\",\n    \"GSM4603135\", \"WIBR3 Primed hESCs Rep 1\", \"WIBR3 Primed hESC\", \"Primed hESC\", \"WIBR3\",\n    \"GSM4603136\", \"WIBR3 Primed hESCs Rep 2\", \"WIBR3 Primed hESC\", \"Primed hESC\", \"WIBR3\",\n    \"GSM4603137\", \"WIBR3 Primed hESCs Rep 3\", \"WIBR3 Primed hESC\", \"Primed hESC\", \"WIBR3\",\n    \"GSM4603138\", \"WIBR3 Primed hESCs Rep 4\", \"WIBR3 Primed hESC\", \"Primed hESC\", \"WIBR3\",\n    # \"GSM4603139\", \"WIBR3 Naive hESCs Rep 1\", \"WIBR3 Naive hESC\", \"Primed hESC\", \"WIBR3\",\n    # \"GSM4603140\", \"WIBR3 Naive hESCs Rep 2\", \"WIBR3 Naive hESC\", \"Primed hESC\", \"WIBR3\",\n    \"GSM4603139\", \"WIBR3 Naive hESCs Rep 1\", \"WIBR3 Naive hESC\", \"Naive hESC\", \"WIBR3\",\n    \"GSM4603140\", \"WIBR3 Naive hESCs Rep 2\", \"WIBR3 Naive hESC\", \"Naive hESC\", \"WIBR3\",\n    \"GSM4603141\", \"WIBR3 tdhTSC Line 1 Rep 1\", \"WIBR3 tdhTSC\", \"tdhTSC\", \"WIBR3\",\n    \"GSM4603142\", \"WIBR3 tdhTSC Line 1 Rep 2\", \"WIBR3 tdhTSC\", \"tdhTSC\", \"WIBR3\",\n    \"GSM4603143\", \"WIBR3 tdhTSC Line 2 Rep1\", \"WIBR3 tdhTSC\", \"tdhTSC\", \"WIBR3\",\n    \"GSM4603144\", \"WIBR3 tdhTSC Line 2 Rep 2\", \"WIBR3 tdhTSC\", \"tdhTSC\", \"WIBR3\",\n    \"GSM4603145\", \"WIBR3 tdhTSC Line 3 Rep 1\", \"WIBR3 tdhTSC\", \"tdhTSC\", \"WIBR3\",\n    \"GSM4603146\", \"UCLA1 tdhTSC Line 1 Rep 1\", \"UCLA1 tdhTSC\", \"tdhTSC\", \"UCLA1\",\n    \"GSM4603147\", \"UCLA1 tdhTSC Line 1 Rep 2\", \"UCLA1 tdhTSC\", \"tdhTSC\", \"UCLA1\",\n    \"GSM4603148\", \"FT190\", \"FT190\", \"FT190\", \"FT190\",\n    \"GSM4603149\", \"Hec116\", \"Hec116\", \"Hec116\", \"Hec116\"\n)\n\ncell_metadata_PRJNA638350 <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJNA638350\",\n        \"SraRunTable.txt\"\n    ),\n    delim = \",\"\n) |>\n    dplyr::rename_with(~ tolower(gsub(\" \", \"_\", .x, fixed = TRUE))) |>\n    dplyr::select(\n        cell = sample_name,\n        run,\n        biosample,\n        source_name,\n        cell_type\n    ) |>\n    dplyr::left_join(geo_info_PRJNA638350, by = \"cell\") |>\n    dplyr::mutate(\n        group = factor(\n            group,\n            levels = c(\"Naive hESC\", \"Primed hESC\", \"tdhTSC\", \"hTSC\", \"FT190\", \"Hec116\")\n        )\n    ) |>\n    tidyr::drop_na()\n\n\nmatrix_readcount_PRJNA638350_pseudobulk_lineage <- purrr::map(\n    levels(cell_metadata_PRJNA638350$group), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA638350 |>\n            dplyr::filter(\n                group == x\n            ) |>\n            dplyr::pull(cell)\n\n        if (length(cells_in_group) > 1) {\n            m <- Matrix::rowSums(matrix_readcount_PRJNA638350[, cells_in_group])\n        } else {\n            m <- matrix_readcount_PRJNA638350[, cells_in_group]\n        }\n        return(m)\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(cell_metadata_PRJNA638350$group)) |>\n    as.matrix()\n\ncolnames(matrix_readcount_PRJNA638350_pseudobulk_lineage) <-\n    stringr::str_replace(\n        colnames(matrix_readcount_PRJNA638350_pseudobulk_lineage),\n        pattern = \" \", replacement = \"_\"\n    )\n\n# clean up\nrm(matrix_readcount_PRJNA638350)\nrm(geo_info_PRJNA638350)\nrm(cell_metadata_PRJNA638350)\n\nLv et al\nSingle-cell RNA sequencing reveals regulatory mechanism for trophoblast cell-fate divergence in human peri-implantation conceptuses\n\nBioProject Accession: PRJNA516921\nGEO Accession: GSE125616\nNotebook: https://jlduan.github.io/replica/journal.pbio.3000187\n\n\n\nmatrix_readcount_PRJNA516921 <- load_matrix(\n    file.path(PROJECT_DIR, \"raw/public/PRJNA516921\")\n)\n\ngeo_info_PRJNA516921 <- read_delim(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJNA516921\",\n        \"notebooks\",\n        \"sample.csv\"\n    ),\n    delim = \",\"\n)\n\ncell_metadata_PRJNA516921 <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJNA516921\",\n        \"SraRunTable.txt\"\n    ),\n    delim = \",\"\n) |>\n    dplyr::rename_with(~ tolower(gsub(\" \", \"_\", .x, fixed = TRUE))) |>\n    dplyr::select(\n        cell = sample_name,\n        run,\n        biosample,\n        development_day,\n        source_name,\n        stage\n    ) |>\n    dplyr::left_join(\n        geo_info_PRJNA516921 |>\n            select(Accession, Title),\n        by = c(\"cell\" = \"Accession\")\n    ) |>\n    dplyr::rename_all(tolower) |>\n    dplyr::rename(\n        developmental_stage = \"development_day\",\n    ) |>\n    dplyr::mutate(\n        developmental_stage = stringr::str_replace(\n            string = developmental_stage,\n            pattern = \"day\",\n            replacement = \"Day \"\n        ),\n        developmental_stage = factor(\n            developmental_stage,\n            levels = developmental_stage |>\n                unique() |>\n                str_sort(numeric = TRUE)\n        ),\n        stage = stringr::str_to_title(string = stage),\n        stage = factor(\n            stage,\n            levels = c(\n                \"Blastocyst\", \"Implantation\",\n                \"Post-Implantation\", \"Endometrial\"\n            )\n        )\n    )\n\ncell_metadata_PRJNA516921 <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJNA516921\",\n        \"exploring/embedding_ncomponents14_seed20200317.csv\"\n    )\n) |>\n    dplyr::left_join(\n        cell_metadata_PRJNA516921,\n        by = c(\"cell\" = \"cell\")\n    ) |>\n    dplyr::select(\n        cell:y_umap, run:dplyr::last_col()\n    ) |>\n    dplyr::filter(\n        !(\n            louvain == 3 | (\n                developmental_stage == \"Day 6\" & louvain == 1\n            ) | (\n                developmental_stage %in% c(\"Day 13\", \"Day 14\")\n            )\n        )\n    ) |>\n    dplyr::mutate(\n        lineage = dplyr::case_when(\n            cell %in% c(\n                \"GSM3578305\",\n                \"GSM3578308\",\n                \"GSM3578339\",\n                \"GSM3578505\",\n                \"GSM3578651\",\n                \"GSM3578653\",\n                \"GSM3578682\",\n                \"GSM3578696\",\n                \"GSM3578697\",\n                \"GSM3578707\",\n                \"GSM3578729\"\n            ) ~ \"PE\",\n            cell %in% c(\n                \"GSM3578300\",\n                \"GSM3578302\",\n                \"GSM3578365\",\n                \"GSM3578492\",\n                \"GSM3578515\",\n                \"GSM3578666\",\n                \"GSM3578668\",\n                \"GSM3578714\",\n                \"GSM3578716\",\n                \"GSM3578728\"\n            ) ~ \"EPI\",\n            TRUE ~ \"TE\"\n        ),\n        lineage = factor(\n            lineage,\n            levels = c(\"EPI\", \"PE\", \"TE\")\n        )\n    )\n\n\nmatrix_readcount_PRJNA516921_pseudobulk_TE <- purrr::map(\n    levels(cell_metadata_PRJNA516921$developmental_stage), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA516921 |>\n            dplyr::filter(\n                lineage == \"TE\",\n                developmental_stage == x\n            ) |>\n            dplyr::pull(cell)\n\n        if (length(cells_in_group) > 1) {\n            m <- Matrix::rowSums(matrix_readcount_PRJNA516921[, cells_in_group])\n        } else {\n            m <- matrix_readcount_PRJNA516921[, cells_in_group]\n        }\n        return(m)\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(cell_metadata_PRJNA516921 |>\n        dplyr::filter(lineage == \"TE\") |>\n        dplyr::pull(developmental_stage) |>\n        droplevels() |>\n        levels()) |>\n    as.matrix()\n\nrm(matrix_readcount_PRJNA516921)\nrm(geo_info_PRJNA516921)\nrm(cell_metadata_PRJNA516921)\n\nLinneberg-Agerholm et al\nNaïve human pluripotent stem cells respond to Wnt, Nodal and LIF signalling to produce expandable naïve extra-embryonic endoderm\n\nBioProject Accession: PRJNA574150\nGEO Accession: GSE138012\nNotebook: https://jlduan.github.io/replica/dev.180620\n\n\n\nmatrix_readcount_PRJNA574150 <- load_matrix(\n    file.path(PROJECT_DIR, \"raw/public/PRJNA574150\")\n)\n\ngeo_info_PRJNA574150 <- tibble::tribble(\n    ~cell, ~sample_description,\n    \"GSM4096610\", \"H9_pES_R1\",\n    \"GSM4096611\", \"H9_pES_R2\",\n    \"GSM4096612\", \"H9_t2iLGo_nES_R2\",\n    \"GSM4096613\", \"H9_t2iLGo_nES_R1\",\n    \"GSM4096614\", \"H9_t2iLGo_nES_R3\",\n    \"GSM4096615\", \"H9_h2iL_nES_R1\",\n    \"GSM4096616\", \"H9_h2iL_nES_R2\",\n    \"GSM4096617\", \"H9_h2iL_nES_R3\",\n    \"GSM4096618\", \"H9_t2iLGo_PrE_R2\",\n    \"GSM4096619\", \"H9_t2iLGo_PrE_R3\",\n    \"GSM4096620\", \"H9_t2iLGo_PrE_R1\",\n    \"GSM4096621\", \"H9_h2iL_PrE_R2\",\n    \"GSM4096622\", \"H9_h2iL_PrE_R3\",\n    \"GSM4096623\", \"H9_h2iL_PrE_R1\",\n    \"GSM4096624\", \"HUES4_pES_R1\",\n    \"GSM4096625\", \"HUES4_pES_R2\",\n    \"GSM4096626\", \"H9_ADE_R1\",\n    \"GSM4096627\", \"H9_ADE_R2\",\n    \"GSM4096628\", \"HUES4_ADE_R2\",\n    \"GSM4096629\", \"HUES4_ADE_R1\",\n    \"GSM4096630\", \"H9_RSeT_nES_R1\",\n    \"GSM4096631\", \"H9_RSeT_nES_R2\",\n    \"GSM4096632\", \"H9_t2iLGo_nEnd_R1\",\n    \"GSM4096633\", \"H9_t2iLGo_nEnd_R2\",\n    \"GSM4096634\", \"H9_t2iLGo_nEnd_R3\",\n    \"GSM4096635\", \"H9_RSeT_PrE_R1-1\",\n    \"GSM4096636\", \"H9_RSeT_PrE_R2-1\",\n    \"GSM4096637\", \"H9_DE_R1\",\n    \"GSM4096638\", \"H9_DE_R2\",\n    \"GSM4096639\", \"H9_DE_R3\",\n    \"GSM4096640\", \"H9_RSeT_PrE_R1-2\",\n    \"GSM4096641\", \"H9_RSeT_PrE_R2-2\",\n    \"GSM4096642\", \"H9_RSeT_nEnd_R1\",\n    \"GSM4096643\", \"H9_RSeT_nEnd_R2\",\n    \"GSM4096644\", \"H9_RSeT_nEnd_R3\"\n)\n\ncell_metadata_PRJNA574150 <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJNA574150\",\n        \"SraRunTable.txt\"\n    ),\n    delim = \",\"\n) |>\n    dplyr::rename_with(~ tolower(gsub(\" \", \"_\", .x, fixed = TRUE))) |>\n    dplyr::select(\n        cell = sample_name,\n        run,\n        biosample,\n        cell_type,\n        background,\n        source_name,\n        stage\n    ) |>\n    dplyr::left_join(geo_info_PRJNA574150, by = \"cell\") |>\n    dplyr::mutate(\n        group = stringr::str_remove(\n            string = sample_description,\n            pattern = \"_R\\\\d.*$\"\n        ),\n        lineage = stringr::str_remove(\n            string = group, pattern = \".+_\"\n        ),\n        lineage = factor(\n            lineage,\n            levels = c(\"nES\", \"pES\", \"PrE\", \"nEnd\", \"DE\", \"ADE\")\n        )\n    ) |>\n    dplyr::rename(cell_line = \"background\")\n\n\nmatrix_readcount_PRJNA574150_pseudobulk_lineage <- purrr::map(\n    levels(cell_metadata_PRJNA574150$lineage), \\(x) {\n        cells_in_group <- cell_metadata_PRJNA574150 |>\n            dplyr::filter(\n                lineage == x,\n            ) |>\n            dplyr::pull(cell)\n\n        if (length(cells_in_group) > 1) {\n            m <- Matrix::rowSums(matrix_readcount_PRJNA574150[, cells_in_group])\n        } else {\n            m <- matrix_readcount_PRJNA574150[, cells_in_group]\n        }\n        return(m)\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(cell_metadata_PRJNA574150$lineage)) |>\n    as.matrix()\n\nrm(matrix_readcount_PRJNA574150)\nrm(geo_info_PRJNA574150)\nrm(cell_metadata_PRJNA574150)\n\nPrincipal component analysis\n\nfeatures_hg_cy <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"github\",\n        \"data\",\n        \"features_hg_cy.csv.gz\"\n    )\n)\n\n\n# prepare features\ntable_s3_sheet1 <- readxl::read_excel(\n    path = file.path(\n        PROJECT_DIR,\n        \"docs\",\n        \"Reconstituting_the_transcriptome_and_DNA_methylome_landscapes_of_human_implantation\",\n        \"41586_2019_1500_MOESM3_ESM\",\n        \"Supplementary Table 3 Lineage_Markers.xlsx\"\n    ),\n    sheet = \"Sheet1\"\n)\ntable_s3_sheet1 |>\n    head() |>\n    knitr::kable()\n\n\n\ngene\nmyAUC\navg_diff\npower\npct.1\npct.2\ncluster\n\n\n\nDPPA5\n0.987\n4.287821\n0.974\n0.985\n0.247\nEPI\n\n\nIFITM1\n0.987\n3.334143\n0.974\n0.997\n0.593\nEPI\n\n\nPOU5F1\n0.986\n3.814455\n0.972\n0.988\n0.355\nEPI\n\n\nKHDC3L\n0.970\n4.646703\n0.940\n0.958\n0.123\nEPI\n\n\nTDGF1\n0.970\n3.947136\n0.940\n0.958\n0.202\nEPI\n\n\nESRG\n0.964\n3.447912\n0.928\n0.961\n0.393\nEPI\n\n\n\n\n\n\nfeatures_hg_EPI <- rownames(matrix_readcount_use)[\n    stringr::str_remove(\n        string = rownames(matrix_readcount_use),\n        pattern = \"^E.+_\"\n    ) %in% (table_s3_sheet1 |>\n        dplyr::filter(\n            cluster == \"EPI\"\n        ) |>\n        dplyr::pull(gene))\n] |>\n    unique()\n\nfeatures_hg_cy_EPI_hg <- features_hg_cy |>\n    dplyr::filter(hg %in% features_hg_EPI) |>\n    dplyr::pull(hg)\n\nfeatures_hg_cy_EPI_cy <- features_hg_cy |>\n    dplyr::filter(hg %in% features_hg_EPI) |>\n    dplyr::pull(cy)\n\n\nfeatures_hg_TE <- rownames(matrix_readcount_use)[\n    stringr::str_remove(\n        string = rownames(matrix_readcount_use),\n        pattern = \"^E.+_\"\n    ) %in% (table_s3_sheet1 |>\n        dplyr::filter(\n            cluster == \"TE\"\n        ) |>\n        dplyr::pull(gene))\n] |>\n    unique()\n\nfeatures_hg_cy_TE_hg <- features_hg_cy |>\n    dplyr::filter(hg %in% features_hg_TE) |>\n    dplyr::pull(hg)\n\nfeatures_hg_cy_TE_cy <- features_hg_cy |>\n    dplyr::filter(hg %in% features_hg_TE) |>\n    dplyr::pull(cy)\n\n\nfeatures_hg_HYP <- rownames(matrix_readcount_use)[\n    stringr::str_remove(\n        string = rownames(matrix_readcount_use),\n        pattern = \"^E.+_\"\n    ) %in% (table_s3_sheet1 |>\n        dplyr::filter(\n            cluster == \"PE\"\n        ) |>\n        dplyr::pull(gene))\n] |>\n    unique()\n\nfeatures_hg_cy_HYP_hg <- features_hg_cy |>\n    dplyr::filter(hg %in% features_hg_HYP) |>\n    dplyr::pull(hg)\n\nfeatures_hg_cy_HYP_cy <- features_hg_cy |>\n    dplyr::filter(hg %in% features_hg_HYP) |>\n    dplyr::pull(cy)\n\nEPI\n\n# z-score\nclusters_selected_blastoid <- c(\"2\", \"3\", \"11\")\n\nmatrix_readcount_pca <- cbind(\n    matrix_readcount_blastoid_pseudobulk[, clusters_selected_blastoid],\n    #\n    matrix_readcount_stem_pseudobulk[, c(\"LW50\"), drop = FALSE],\n    #\n    matrix_readcount_PRJEB11202_pseudobulk_EPI,\n    matrix_readcount_PRJNA562548_pseudobulk_EPI,\n    matrix_readcount_PRJNA431392_pseudobulk_EPI,\n    matrix_readcount_PRJEB7132_pseudobulk,\n    matrix_readcount_PRJNA576801_pseudobulk_lineage[\n        , c(\"Naïve_hPSC\", \"Primed_hPSC\")\n    ],\n    matrix_readcount_PRJNA638350_pseudobulk_lineage[\n        , c(\"Naive_hESC\", \"Primed_hESC\")\n    ]\n)\n\ncolnames(matrix_readcount_pca) <- paste(\n    rep(\n        c(\n            \"Blastoid\",\n            #\n            \"Blastoid\",\n            #\n            \"PRJEB11202\",\n            \"PRJNA562548\",\n            \"PRJNA431392\",\n            \"PRJEB7132\",\n            \"PRJNA576801\",\n            \"PRJNA638350\"\n        ),\n        times = c(\n            length(clusters_selected_blastoid),\n            #\n            ncol(matrix_readcount_stem_pseudobulk[, c(\"LW50\"), drop = FALSE]),\n            #\n            ncol(matrix_readcount_PRJEB11202_pseudobulk_EPI),\n            ncol(matrix_readcount_PRJNA562548_pseudobulk_EPI),\n            ncol(matrix_readcount_PRJNA431392_pseudobulk_EPI),\n            ncol(matrix_readcount_PRJEB7132_pseudobulk),\n            length(c(\"Naïve_hPSC\", \"Primed_hPSC\")),\n            length(c(\"Naive_hESC\", \"Primed_hESC\"))\n        )\n    ),\n    colnames(matrix_readcount_pca),\n    sep = \":\"\n)\n\n\npca_out_EPI <- perform_pca(\n    matrix = matrix_readcount_pca,\n    features = features_hg_cy_EPI_hg,\n    min_counts = 1\n)\n\nembedding_pca_EPI <- pca_out_EPI$x |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"sample_name\") |>\n    dplyr::select(sample_name:PC3) |>\n    dplyr::rename(\n        x_pca = PC1,\n        y_pca = PC2,\n        z_pca = PC3\n    ) |>\n    dplyr::relocate(x_pca, y_pca, z_pca, .after = dplyr::last_col()) |>\n    dplyr::mutate(\n        lineage = stringr::str_remove(string = sample_name, pattern = \"^P.+:\"),\n        dataset = stringr::str_remove(string = sample_name, pattern = \":.+$\")\n    )\n\n\n\n\nTE\n\nclusters_selected_blastoid <- c(\"0\", \"1\", \"8\", \"9\", \"12\", \"17\")\n\nmatrix_readcount_pca <- cbind(\n    matrix_readcount_blastoid_pseudobulk[, clusters_selected_blastoid],\n    #\n    matrix_readcount_stem_pseudobulk[, c(\"LW52\"), drop = FALSE],\n    #\n    matrix_readcount_PRJEB11202_pseudobulk_TE,\n    matrix_readcount_PRJNA431392_pseudobulk_TE,\n    #\n    matrix_readcount_PRJNA576801_pseudobulk_lineage,\n    matrix_readcount_PRJNA638350_pseudobulk_lineage[\n        ,\n        c(\"Naive_hESC\", \"Primed_hESC\", \"tdhTSC\", \"hTSC\")\n    ],\n    matrix_readcount_PRJNA516921_pseudobulk_TE\n)\n\n# name columns\ncolnames(matrix_readcount_pca) <- paste(\n    rep(\n        c(\n            \"Blastoid\",\n            #\n            \"Blastoid\",\n            #\n            \"PRJEB11202\",\n            \"PRJNA431392\",\n            #\n            \"PRJNA576801\",\n            \"PRJNA638350\",\n            \"PRJNA516921\"\n        ),\n        times = c(\n            ncol(matrix_readcount_blastoid_pseudobulk[\n                ,\n                clusters_selected_blastoid\n            ]),\n            #\n            ncol(matrix_readcount_stem_pseudobulk[, c(\"LW52\"), drop = FALSE]),\n            #\n            ncol(matrix_readcount_PRJEB11202_pseudobulk_TE),\n            ncol(matrix_readcount_PRJNA431392_pseudobulk_TE),\n            #\n            ncol(matrix_readcount_PRJNA576801_pseudobulk_lineage),\n            length(c(\"Naive_hESC\", \"Primed_hESC\", \"tdhTSC\", \"hTSC\")),\n            ncol(matrix_readcount_PRJNA516921_pseudobulk_TE)\n        )\n    ),\n    colnames(matrix_readcount_pca),\n    sep = \":\"\n)\n\ncolnames(matrix_readcount_pca) <- stringr::str_replace_all(\n    string = colnames(matrix_readcount_pca),\n    pattern = \" \",\n    replacement = \"_\"\n)\n\nmatrix_readcount_pca <- matrix_readcount_pca[\n    , colnames(matrix_readcount_pca) %in% c(\n        \"Blastoid:0\",\n        \"Blastoid:1\",\n        \"Blastoid:8\",\n        \"Blastoid:9\",\n        \"Blastoid:12\",\n        \"Blastoid:17\",\n        \"Blastoid:LW52\",\n        \"PRJEB11202:E5\",\n        \"PRJEB11202:E6\",\n        \"PRJEB11202:E7\",\n        \"PRJNA431392:E6\",\n        \"PRJNA431392:E8\",\n        \"PRJNA431392:E10\",\n        \"PRJNA431392:E12\",\n        \"PRJNA576801:Naïve_hTSC\",\n        \"PRJNA638350:tdhTSC\",\n        \"PRJNA638350:hTSC\",\n        \"PRJNA516921:Day_6\",\n        \"PRJNA516921:Day_7\",\n        \"PRJNA516921:Day_8\",\n        \"PRJNA516921:Day_9\",\n        \"PRJNA516921:Day_10\"\n    )\n]\n\n\npca_out_TE <- perform_pca(\n    matrix = matrix_readcount_pca,\n    features = features_hg_cy_TE_hg,\n    min_counts = 1\n)\n\nembedding_pca_TE <- pca_out_TE$x |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"sample_name\") |>\n    dplyr::select(sample_name:PC3) |>\n    dplyr::rename(\n        x_pca = PC1,\n        y_pca = PC2,\n        z_pca = PC3\n    ) |>\n    dplyr::relocate(x_pca, y_pca, z_pca, .after = dplyr::last_col()) |>\n    dplyr::mutate(\n        lineage = stringr::str_remove(string = sample_name, pattern = \"^P.+:\"),\n        dataset = stringr::str_remove(string = sample_name, pattern = \":.+$\")\n    )\n\nHYP\n\nclusters_selected_blastoid <- c(\"18\", \"15\", \"16\", \"13\")\n\nmatrix_readcount_pca <- cbind(\n    matrix_readcount_blastoid_pseudobulk[\n        ,\n        clusters_selected_blastoid,\n        drop = FALSE\n    ],\n    #\n    matrix_readcount_stem_pseudobulk[, c(\"LW51\"), drop = FALSE],\n    #\n    matrix_readcount_PRJEB11202_pseudobulk_HYP,\n    matrix_readcount_PRJNA562548_pseudobulk_HYP,\n    matrix_readcount_PRJNA431392_pseudobulk_HYP,\n    #\n    matrix_readcount_PRJNA574150_pseudobulk_lineage[, \"nEnd\", drop = FALSE]\n)\n\n# name columns\ncolnames(matrix_readcount_pca) <- paste(\n    rep(\n        c(\n            \"Blastoid\",\n            #\n            \"Blastoid\",\n            #\n            \"PRJEB11202\",\n            \"PRJNA562548\",\n            \"PRJNA431392\",\n            #\n            \"PRJNA574150\"\n        ),\n        times = c(\n            length(clusters_selected_blastoid),\n            #\n            ncol(matrix_readcount_stem_pseudobulk[, c(\"LW51\"), drop = FALSE]),\n            #\n            ncol(matrix_readcount_PRJEB11202_pseudobulk_HYP),\n            ncol(matrix_readcount_PRJNA562548_pseudobulk_HYP),\n            ncol(matrix_readcount_PRJNA431392_pseudobulk_HYP),\n            #\n            length(\"nEnd\")\n        )\n    ),\n    colnames(matrix_readcount_pca),\n    sep = \":\"\n)\n\ncolnames(matrix_readcount_pca) <- stringr::str_replace_all(\n    string = colnames(matrix_readcount_pca),\n    pattern = \" \",\n    replacement = \"_\"\n)\n\n\npca_out_HYP <- perform_pca(\n    matrix = matrix_readcount_pca,\n    features = features_hg_cy_HYP_hg,\n    min_counts = 1\n)\n\nembedding_pca_HYP <- pca_out_HYP$x |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"sample_name\") |>\n    dplyr::select(sample_name:PC3) |>\n    dplyr::rename(\n        x_pca = PC1,\n        y_pca = PC2,\n        z_pca = PC3\n    ) |>\n    dplyr::relocate(x_pca, y_pca, z_pca, .after = dplyr::last_col()) |>\n    dplyr::mutate(\n        lineage = stringr::str_remove(string = sample_name, pattern = \"^P.+:\"),\n        dataset = stringr::str_remove(string = sample_name, pattern = \":.+$\")\n    )\n\nVisualization, joint\n\n# assign colors\n\nstudies <- tibble::tribble(\n    ~bioproject, ~description,\n    \"Blastoid\", \"Blastoid\",\n    \"PRJEB11202\", \"Petropoulos et al., 2016\",\n    \"PRJEB7132\", \"Takashima et al., 2014\",\n    \"PRJNA431392\", \"Zhou et al., 2019\",\n    \"PRJNA516921\", \"lv et al., 2019\",\n    \"PRJNA562548\", \"Xiang et al., 2020\",\n    \"PRJNA574150\", \"Linneberg-Agerholm et al., 2019\",\n    \"PRJNA576801\", \"Dong et al., 2020\",\n    \"PRJNA638350\", \"Cinkornpumin et al., 2020\"\n) |>\n    mutate(\n        color = c(\n            \"#F8766D\",\n            \"#D39200\",\n            \"#93AA00\",\n            \"#00BA38\",\n            \"#00C19F\",\n            \"#00B9E3\",\n            \"#619CFF\",\n            \"#DB72FB\",\n            \"#FF61C3\"\n        )\n    )\n\n\nembedding_pca_EPI <- embedding_pca_EPI |>\n    dplyr::mutate(dataset = factor(dataset, levels = studies$bioproject))\n\nembedding_pca_HYP <- embedding_pca_HYP |>\n    dplyr::mutate(\n        y_pca = 0 - y_pca,\n        dataset = factor(dataset, levels = studies$bioproject),\n    )\n\nembedding_pca_TE <- embedding_pca_TE |>\n    dplyr::mutate(\n        dataset = factor(dataset, levels = studies$bioproject),\n        lineage = stringr::str_replace(\n            string = lineage, pattern = \"Day_\", replacement = \"E\"\n        )\n    )\n\n\n# compose\n\np1 <- plot_pca_embedding(\n    data = embedding_pca_EPI,\n    x = x_pca,\n    y = y_pca,\n    color = dataset,\n    title = \"EPI; PCA\",\n    legend_x = 0.5,\n    legend_y = 0.995,\n    min_segment_length = 0\n) +\n    add_xy_label_pca(pca_out_EPI) +\n    ggplot2::scale_color_manual(\n        values = studies$color,\n        breaks = studies$bioproject,\n        labels = studies$description,\n        drop = FALSE\n    ) +\n    ggplot2::theme(legend.position = \"bottom\") +\n    ggplot2::guides(\n        colour = ggplot2::guide_legend(\n            override.aes = list(size = 2.5), ncol = 2,\n        )\n    )\nab <- coef(\n    MASS::rlm(y_pca ~ x_pca,\n        data = embedding_pca_EPI |>\n            dplyr::filter(dataset != \"Blastoid\")\n    )\n)\np1 <- p1 + ggplot2::geom_abline(\n    intercept = ab[1], slope = ab[2], color = \"#8ace7e\", size = 0.2\n)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. Please use\n`linewidth` instead.\nℹ The deprecated feature was likely used in the ggplot2 package.\n  Please report the issue at <https://github.com/tidyverse/ggplot2/issues>.\n\np2 <- plot_pca_embedding(\n    data = embedding_pca_HYP,\n    x = y_pca,\n    y = x_pca,\n    color = dataset,\n    title = \"HYP; PCA\",\n    legend_x = 0.5,\n    legend_y = 0.995,\n    min_segment_length = 0\n) +\n    add_xy_label_pca(pca_out_HYP, \"PC2\", \"PC1\") +\n    ggplot2::scale_color_manual(\n        values = studies$color,\n        breaks = studies$bioproject,\n        labels = studies$description,\n        drop = FALSE\n    ) +\n    ggplot2::theme(legend.position = \"bottom\") +\n    ggplot2::guides(\n        colour = ggplot2::guide_legend(\n            override.aes = list(size = 2.5), ncol = 2\n        )\n    )\nab <- coef(\n    MASS::rlm(x_pca ~ y_pca,\n        data = embedding_pca_HYP |>\n            dplyr::filter(dataset != \"Blastoid\")\n    )\n)\np2 <- p2 + ggplot2::geom_abline(\n    intercept = ab[1], slope = ab[2],\n    color = \"#ff684c\", linewidth = 0.2\n)\n\np3 <- plot_pca_embedding(\n    data = embedding_pca_TE,\n    x = x_pca,\n    y = y_pca,\n    color = dataset,\n    title = \"TE; PCA\",\n    legend_x = 0.5,\n    legend_y = 0.995,\n    min_segment_length = 0\n) +\n    add_xy_label_pca(pca_out_TE) +\n    ggplot2::scale_color_manual(\n        values = studies$color,\n        breaks = studies$bioproject,\n        labels = studies$description,\n        drop = FALSE\n    ) +\n    ggplot2::theme(legend.position = \"bottom\") +\n    ggplot2::guides(\n        colour = ggplot2::guide_legend(\n            override.aes = list(size = 2.5), ncol = 2\n        )\n    )\nab <- coef(\n    MASS::rlm(y_pca ~ x_pca,\n        data = embedding_pca_TE |>\n            dplyr::filter(dataset != \"Blastoid\")\n    )\n)\np3 <- p3 + ggplot2::geom_abline(\n    intercept = ab[1], slope = ab[2],\n    color = \"#9467bd\", size = 0.2\n)\n\n\nlist(p1 + p2 + p3) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 1, guides = \"collect\") +\n    patchwork::plot_annotation(theme = theme(plot.margin = margin())) &\n    theme(legend.position = \"bottom\", legend.direction = \"horizontal\")\n\n\n\nPrincipal component analysis (PCA) of blastoid-derived ELCs, HLCs and TLCs relative to published maps from human embryos and established human PSC lines"
  },
  {
    "objectID": "compare_blastoids.html#comparison-w-cynomolgus-monkeys",
    "href": "compare_blastoids.html#comparison-w-cynomolgus-monkeys",
    "title": "Comparative Analysis of Single Cell Transcriptomes of Human Blastoids",
    "section": "Comparison w/ cynomolgus monkeys",
    "text": "Comparison w/ cynomolgus monkeys\n\nA developmental coordinate of pluripotency among mice, monkeys and humans\n\nBioProject Accession: PRJNA301445\nGEO Accession: GSE74767\nNotebook: https://jlduan.github.io/replica/nature19096\n\n\nData loading\n\ncolor_palette_cluster <- c(\n    \"0\" = \"#8DD3C7\",\n    \"1\" = \"#9EDAE5FF\",\n    \"2\" = \"#BEBADA\",\n    \"3\" = \"#FB8072\",\n    \"4\" = \"#80B1D3\",\n    \"5\" = \"#FDB462\",\n    \"6\" = \"#B3DE69\",\n    \"7\" = \"#FCCDE5\",\n    \"8\" = \"#DC863B\",\n    \"9\" = \"#BC80BD\",\n    \"10\" = \"#11c638\",\n    \"11\" = \"#BCBD22FF\",\n    \"12\" = \"#17BECFFF\",\n    \"13\" = \"#AEC7E8FF\",\n    \"14\" = \"#EAD3C6\",\n    \"15\" = \"#98DF8AFF\",\n    \"16\" = \"#FF9896FF\",\n    \"17\" = \"#C5B0D5FF\",\n    \"18\" = \"#C49C94FF\",\n    \"19\" = \"#F7B6D2FF\",\n    \"20\" = \"#D33F6A\",\n    \"21\" = \"#8E063B\",\n    \"22\" = \"#023FA5\"\n)\n\n# prepare matrix\nmatrix_cpm_PRJNA301445_cy <- load_matrix(\n    file.path(PROJECT_DIR, \"raw/public/PRJNA301445/preprocessed/cy\")\n)\n\nembedding_PRJNA301445_cy <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/public/PRJNA301445/Comparison/cy_EPI/embedding_cy.csv\"\n    )\n) |>\n    dplyr::mutate(\n        group = factor(\n            group,\n            levels = c(\n                \"ICM\",\n                \"Pre-EPI\",\n                \"Hypoblast\",\n                \"PreE-TE\",\n                \"PreL-TE\",\n                \"PostE-EPI\",\n                \"PostL-EPI\",\n                \"Gast1\",\n                \"Gast2a\",\n                \"Gast2b\",\n                \"Post-paTE\",\n                \"VE/YE\",\n                \"EXMC\",\n                \"cyESCFF\",\n                \"cyESCoF\"\n                # \"E5.5EPI\",\n                # \"E5.5VE\",\n                # \"E6.5EPI-T hi\",\n                # \"E6.5EPI-T lo\",\n                # \"E6.5VE\",\n                # \"EpiLC\",\n                # \"2i+L ESC\"\n            )\n        )\n    )\n\n\nmatrix_cpm_PRJNA301445_cy_pseudobulk_lineage <- purrr::map(\n    levels(embedding_PRJNA301445_cy$group), \\(x) {\n        cells_in_group <- embedding_PRJNA301445_cy |>\n            dplyr::filter(\n                group == x\n            ) |>\n            dplyr::pull(cell)\n\n        Matrix::rowMeans(matrix_cpm_PRJNA301445_cy[, cells_in_group])\n    }\n) |>\n    purrr::reduce(cbind) |>\n    `colnames<-`(levels(embedding_PRJNA301445_cy$group)) |>\n    as.matrix()\n\nrm(matrix_cpm_PRJNA301445_cy)\nrm(embedding_PRJNA301445_cy)\n\n\n# prepare features\nfeatures_hg_cy_EPI_HYP_TE_hg <- features_hg_cy |>\n    dplyr::filter(\n        hg %in% (\n            c(\n                features_hg_cy_EPI_hg,\n                features_hg_cy_HYP_hg,\n                features_hg_cy_TE_hg\n            ) |> unique()\n        )\n    ) |>\n    dplyr::pull(hg)\n\nfeatures_hg_cy_EPI_HYP_TE_cy <- features_hg_cy |>\n    dplyr::filter(\n        hg %in% (\n            c(\n                features_hg_cy_EPI_hg,\n                features_hg_cy_HYP_hg,\n                features_hg_cy_TE_hg\n            ) |> unique()\n        )\n    ) |>\n    dplyr::pull(cy)\n\nCorrelation heatmap\n\nmatrix_corr <- cbind(\n    calc_cpm(\n        matrix_readcount_blastoid_pseudobulk\n    )[features_hg_cy_EPI_HYP_TE_hg, ],\n    matrix_cpm_PRJNA301445_cy_pseudobulk_lineage[\n        features_hg_cy_EPI_HYP_TE_cy,\n    ]\n)\n\nmatrix_heatmap_corr_EPI_HYP_TE <- cor(log10(matrix_corr + 1) |> as.matrix())\n\nmatrix_heatmap_corr_EPI_HYP_TE <- matrix_heatmap_corr_EPI_HYP_TE[\n    c(\"11\", \"18\", \"0\", \"1\", \"8\", \"9\", \"12\", \"17\"),\n    c(\n        \"ICM\", \"Pre-EPI\", \"PostE-EPI\", \"PostL-EPI\",\n        \"Gast1\", \"Gast2a\", \"Gast2b\",\n        \"Hypoblast\", \"PreE-TE\", \"PreL-TE\", \"Post-paTE\"\n    )\n]\n\n\ncolnames(matrix_heatmap_corr_EPI_HYP_TE) <- paste(\n    rep(\n        c(\"EPI\", \"HYP\", \"TE\"),\n        times = c(7, 1, 3)\n    ),\n    colnames(matrix_heatmap_corr_EPI_HYP_TE),\n    sep = \":\"\n)\n\n\nPreview correlations.\n\nCodematrix_heatmap_corr_EPI_HYP_TE |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"cluster\") |>\n    gt::gt() |>\n    gt::fmt_number(columns = c(`EPI:ICM`:`TE:Post-paTE`), decimals = 2) |>\n    gt::data_color(\n        columns = c(`EPI:ICM`:`TE:Post-paTE`),\n        colors = scales::col_numeric(\n            c(\"#63BE7B\", \"#FFEB84\", \"#F87274\"),\n            domain = range(matrix_heatmap_corr_EPI_HYP_TE)\n        )\n    ) |>\n    gt::cols_align(\n        columns = dplyr::everything(),\n        align = c(\"center\")\n    ) |>\n    gt::cols_width(\n        dplyr::everything() ~ gt::px(60)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncluster\n      EPI:ICM\n      EPI:Pre-EPI\n      EPI:PostE-EPI\n      EPI:PostL-EPI\n      EPI:Gast1\n      EPI:Gast2a\n      EPI:Gast2b\n      HYP:Hypoblast\n      TE:PreE-TE\n      TE:PreL-TE\n      TE:Post-paTE\n    \n\n\n11\n0.41\n0.55\n0.53\n0.45\n0.43\n0.33\n0.31\n0.22\n0.35\n0.28\n0.11\n\n\n18\n0.44\n0.32\n0.19\n0.23\n0.27\n0.31\n0.34\n0.62\n0.42\n0.45\n0.28\n\n\n0\n0.32\n0.28\n0.17\n0.18\n0.20\n0.13\n0.20\n0.28\n0.42\n0.52\n0.65\n\n\n1\n0.42\n0.39\n0.28\n0.28\n0.30\n0.23\n0.28\n0.35\n0.48\n0.56\n0.54\n\n\n8\n0.38\n0.38\n0.33\n0.36\n0.38\n0.31\n0.36\n0.38\n0.46\n0.56\n0.60\n\n\n9\n0.21\n0.16\n0.06\n0.06\n0.09\n0.01\n0.09\n0.15\n0.29\n0.41\n0.58\n\n\n12\n0.37\n0.40\n0.33\n0.32\n0.34\n0.26\n0.30\n0.33\n0.40\n0.47\n0.43\n\n\n17\n0.31\n0.31\n0.24\n0.24\n0.26\n0.17\n0.24\n0.26\n0.38\n0.48\n0.56\n\n\n\n\n\n\n\nha_group <- stringr::str_remove(\n    string = colnames(matrix_heatmap_corr_EPI_HYP_TE),\n    pattern = \":.+$\"\n)\n\nha_column <- ComplexHeatmap::HeatmapAnnotation(\n    lineage = ComplexHeatmap::anno_simple(\n        colnames(matrix_heatmap_corr_EPI_HYP_TE),\n        # pch = anno_labels_cluster,\n        col = setNames(\n            object = scales::hue_pal()(n = ncol(matrix_heatmap_corr_EPI_HYP_TE)),\n            nm = colnames(matrix_heatmap_corr_EPI_HYP_TE)\n        ),\n        which = \"column\",\n        pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    show_annotation_name = TRUE,\n    annotation_label = c(\n        \"Lineage\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    annotation_name_side = \"left\"\n)\n\nha_left <- ComplexHeatmap::HeatmapAnnotation(\n    cluster = ComplexHeatmap::anno_simple(\n        rownames(matrix_heatmap_corr_EPI_HYP_TE),\n        col = color_palette_cluster,\n        which = \"row\",\n        # pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    #\n    lineage = ComplexHeatmap::anno_simple(\n        rownames(matrix_heatmap_corr_EPI_HYP_TE) |>\n            tibble::enframe() |>\n            dplyr::mutate(\n                color = case_when(\n                    value %in% c(11) ~ \"EPI\",\n                    value %in% c(18) ~ \"HYP\",\n                    value %in% c(0, 1, 8, 9, 12, 17) ~ \"TE\",\n                    value %in% c(10, 14) ~ \"Pre-lineage\",\n                    TRUE ~ \"Blastoid\"\n                )\n            ) |>\n            dplyr::pull(color),\n        col = setNames(\n            object = c(\"grey70\", \"#8ace7e\", \"#ff684c\", \"#9467bd\", \"#ffd8b1\"),\n            nm = c(\"Blastoid\", \"EPI\", \"HYP\", \"TE\", \"Pre-lineage\")\n        ),\n        which = \"row\",\n        # pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(2, \"mm\")\n    ),\n    # ,\n    which = \"row\",\n    show_annotation_name = FALSE,\n    annotation_label = c(\n        \"Cluster\",\n        \"Lineage\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6)\n)\n\ncolors_ <- as.character(\n    wesanderson::wes_palette(\"Zissou1\", 10, type = \"continuous\")\n)\n\ncol_fun <- circlize::colorRamp2(\n    seq(0, 0.6, 0.1),\n    # viridis::plasma(11)\n    # wesanderson::wes_palette(\"Zissou1\", 51, type = \"continuous\")\n    colors_[c(1, 2, 3, 5, 7, 9, 10)]\n)\n\nht <- ComplexHeatmap::Heatmap(\n    matrix_heatmap_corr_EPI_HYP_TE,\n    # name = \"heatmap\",\n    # col = wesanderson::wes_palette(\"Zissou1\", 50, type = \"continuous\"),\n    col = col_fun,\n    border = NA,\n    rect_gp = grid::gpar(col = \"white\", lwd = 1),\n    cell_fun = function(j, i, x, y, width, height, fill) {\n        # grid::grid.text(\n        #     sprintf(\"%.2f\", corr_heatmap[i, j]), x, y,\n        #     gp = grid::gpar(fontsize = 6)\n        # )\n        grid::grid.text(\n            round(matrix_heatmap_corr_EPI_HYP_TE[i, j], 2),\n            x, y,\n            gp = grid::gpar(fontsize = 5)\n        )\n    },\n    #\n    cluster_rows = FALSE,\n    cluster_columns = FALSE,\n    #\n    # row_labels = NA,\n    row_names_side = c(\"left\"),\n    row_names_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    show_row_names = TRUE,\n    #\n    column_labels = stringr::str_remove(\n        string = colnames(matrix_heatmap_corr_EPI_HYP_TE), pattern = \"^.+:\"\n    ),\n    column_names_side = c(\"top\"),\n    column_names_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_names_rot = -90,\n    show_column_names = TRUE,\n    #\n    show_heatmap_legend = FALSE,\n    #\n    show_row_dend = FALSE,\n    show_column_dend = FALSE,\n    #\n    top_annotation = ha_column,\n    left_annotation = ha_left,\n    #\n    heatmap_legend_param = list(\n        title = \"Corr\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = unit(15, \"mm\"),\n        legend_width = unit(5, \"mm\")\n    ),\n    #\n    column_split = ha_group,\n    column_gap = unit(1.5, \"mm\"),\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = -90,\n    column_title = NULL\n)\n\n\n# legend\nlgd_species <- ComplexHeatmap::Legend(\n    title = \"Species\",\n    labels = c(\"Monkey\", \"Human\"),\n    #\n    grid_height = unit(2.5, \"mm\"), grid_width = unit(2.5, \"mm\"),\n    #\n    legend_gp = grid::gpar(\n        fill = c(\"Cynomolgus Monkey\" = \"#3D79F3FF\", \"Human\" = \"#34A74BFF\")\n    ),\n    labels_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 5\n    ),\n    title_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    )\n)\n\nlgd_colorbar <- ComplexHeatmap::Legend(\n    col_fun = col_fun,\n    title = \"Corr\",\n    grid_height = unit(1, \"mm\"),\n    grid_width = unit(2, \"mm\"),\n    legend_height = unit(10, \"mm\"),\n    legend_width = unit(2, \"mm\"),\n    title_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    ),\n    labels_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 5\n    )\n)\n\nlgd_lineage <- ComplexHeatmap::Legend(\n    title = \"Lineage\",\n    labels = c(\"ELCs\", \"HLCs\", \"TLCs\"),\n    #\n    grid_height = unit(2.5, \"mm\"), grid_width = unit(2.5, \"mm\"),\n    #\n    legend_gp = grid::gpar(\n        fill = c(\n            \"ELCs\" = \"#8ace7e\",\n            \"HLCs\" = \"#ff684c\",\n            \"TLCs\" = \"#9467bd\"\n        )\n    ),\n    labels_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 5\n    ),\n    title_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    )\n)\n\npd <- ComplexHeatmap::packLegend(\n    # lgd_cluster,\n    lgd_colorbar,\n    lgd_lineage,\n    # lgd_species,\n    gap = unit(8, \"mm\"),\n    direction = \"vertical\"\n)\n\n\nComplexHeatmap::draw(\n    ht,\n    heatmap_legend_list = list(pd)\n)"
  },
  {
    "objectID": "compare_blastoids.html#derived-stem-cells",
    "href": "compare_blastoids.html#derived-stem-cells",
    "title": "Comparative Analysis of Single Cell Transcriptomes of Human Blastoids",
    "section": "Derived stem cells",
    "text": "Derived stem cells\nData loading\n\nmatrix_readcount_5iLA <- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR,\n        \"raw/naive_human_PSC\",\n        \"matrix\",\n        \"xaa_Aligned.sortedByCoord.out_deduped_q10_gene_id_featureCounts.txt.gz\"\n    ),\n    delim = \"\\t\",\n    col_names = TRUE,\n    skip = 1\n) |>\n    dplyr::select(-c(2:6))\n\nmatrix_readcount_5iLA <- Matrix(\n    data = as.matrix(matrix_readcount_5iLA[, -1]),\n    dimnames = list(\n        matrix_readcount_5iLA[, 1, drop = TRUE],\n        c(\"5iLA-1\", \"5iLA-2\")\n    ),\n    sparse = TRUE\n)\n\nCorrelation heatmap\n\nmatrix_corr <- cbind(\n    matrix_readcount_stem_pseudobulk[, c(\"LW49\", \"LW50\", \"LW51\", \"LW52\")],\n    \"5iLA\" = Matrix::rowSums(matrix_readcount_5iLA),\n    matrix_readcount_PRJEB7132_pseudobulk,\n    matrix_readcount_PRJNA576801_pseudobulk_lineage,\n    matrix_readcount_PRJNA638350_pseudobulk_lineage[\n        ,\n        !colnames(matrix_readcount_PRJNA638350_pseudobulk_lineage) %in% c(\n            \"FT190\", \"Hec116\"\n        )\n    ],\n    matrix_readcount_PRJNA574150_pseudobulk_lineage[, \"nEnd\", drop = FALSE]\n)\n\ncolnames(matrix_corr) <- c(\n    \"WIBR3-5i/L/A, scRNA-Seq\",\n    \"Blastoid naïve ES cells\",\n    \"Blastoid nEND\",\n    \"Blastoid TSCs\",\n    #\n    \"WIBR3-5i/L/A, bulk\",\n    #\n    \"PRJEB7132:H9 Primed\",\n    \"PRJEB7132:H9 Reset\",\n    #\n    \"PRJNA576801:Naïve ES cells\",\n    \"PRJNA576801:TSCs\",\n    \"PRJNA576801:Primed ES cells\",\n    #\n    \"PRJNA638350:Naïve ES cells\",\n    \"PRJNA638350:Primed ES cells\",\n    \"PRJNA638350:TSCs (TD)\",\n    \"PRJNA638350:TSCs\",\n    #\n    \"PRJNA574150:nEND\"\n)\n\nfeatures_ <- c(\n    features_hg_cy_EPI_hg,\n    features_hg_cy_HYP_hg,\n    features_hg_cy_TE_hg\n) |> unique()\n\n\n\n\n\nmatrix_heatmap_corr <- cor(\n    log10(calc_cpm(matrix_corr)[features_, ] + 1) |>\n        as.matrix()\n)\n\n\ncolumn_labels <- colnames(matrix_heatmap_corr) |>\n    tibble::enframe(value = \"sample_name\") |>\n    dplyr::mutate(\n        a = stringr::str_remove(string = sample_name, pattern = \":.+$\")\n    ) |>\n    dplyr::left_join(\n        studies,\n        by = c(\"a\" = \"bioproject\")\n    ) |>\n    dplyr::select(sample_name, a, description) |>\n    dplyr::mutate(\n        label = dplyr::case_when(\n            is.na(description) ~ sample_name,\n            TRUE ~ paste(sample_name, description, sep = \"; \")\n        ),\n        label = stringr::str_remove(\n            string = label,\n            pattern = \".+:\"\n        )\n    ) |>\n    dplyr::pull(label)\n\n\n\n\n\ncol_fun <- circlize::colorRamp2(\n    seq(0, 1, 0.2),\n    # viridis::plasma(11)\n    # wesanderson::wes_palette(\"Zissou1\", 51, type = \"continuous\")\n    #\n    as.character(\n        wesanderson::wes_palette(\"Zissou1\", 10, type = \"continuous\")\n    )[c(1, 3, 5, 7, 9, 10)]\n)\n\nht <- ComplexHeatmap::Heatmap(\n    matrix_heatmap_corr,\n    # name = \"heatmap\",\n    # col = wesanderson::wes_palette(\"Zissou1\", 50, type = \"continuous\"),\n    col = col_fun,\n    border = NA,\n    rect_gp = grid::gpar(col = \"white\", lwd = 1),\n    cell_fun = function(j, i, x, y, width, height, fill) {\n        grid::grid.text(\n            round(matrix_heatmap_corr[i, j], 2),\n            x, y,\n            gp = grid::gpar(fontsize = 5)\n        )\n    },\n    #\n    cluster_rows = FALSE,\n    cluster_columns = FALSE,\n    #\n    row_labels = column_labels,\n    row_names_side = c(\"left\"),\n    row_names_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    show_row_names = TRUE,\n    #\n    column_labels = column_labels,\n    column_names_side = c(\"top\"),\n    column_names_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    # column_names_rot = -90,\n    column_names_rot = -45,\n    show_column_names = TRUE,\n    #\n    show_heatmap_legend = FALSE,\n    #\n    show_row_dend = FALSE,\n    show_column_dend = FALSE,\n    #\n    # top_annotation = ha_column,\n    # left_annotation = ha_left,\n    #\n    heatmap_legend_param = list(\n        title = \"Corr\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = unit(15, \"mm\"),\n        legend_width = unit(5, \"mm\")\n    ),\n    #\n    # column_split = ha_group,\n    column_gap = unit(1.5, \"mm\"),\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = -90,\n    column_title = NULL\n)\n\n\nComplexHeatmap::draw(ht)\n\n\n\nCorrelation analysis of blastoid naïve ES cells, blastoid nEND and blastoid TSCs compared to published transcriptomes"
  },
  {
    "objectID": "compare_blastoids.html#r-session-info",
    "href": "compare_blastoids.html#r-session-info",
    "title": "Comparative Analysis of Single Cell Transcriptomes of Human Blastoids",
    "section": "R session info",
    "text": "R session info\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Monterey 12.6\n system   aarch64, darwin21.6.0\n ui       unknown\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-09-25\n pandoc   2.19.2 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package        * version       date (UTC) lib source\n BiocGenerics     0.42.0        2022-04-26 [1] Bioconductor\n bit              4.0.4         2020-08-04 [1] CRAN (R 4.2.0)\n bit64            4.0.5         2020-08-30 [1] CRAN (R 4.2.0)\n cachem           1.0.6         2021-08-19 [1] CRAN (R 4.2.0)\n Cairo            1.6-0         2022-07-05 [1] CRAN (R 4.2.1)\n callr            3.7.2         2022-08-22 [1] CRAN (R 4.2.1)\n cellranger       1.1.0         2016-07-27 [1] CRAN (R 4.2.0)\n circlize         0.4.15        2022-05-10 [1] CRAN (R 4.2.0)\n cli              3.4.1         2022-09-23 [1] CRAN (R 4.2.1)\n clue             0.3-61        2022-05-30 [1] CRAN (R 4.2.0)\n cluster          2.1.4         2022-08-22 [2] CRAN (R 4.2.1)\n codetools        0.2-18        2020-11-04 [2] CRAN (R 4.2.1)\n colorspace       2.0-3         2022-02-21 [1] CRAN (R 4.2.0)\n ComplexHeatmap   2.12.1        2022-08-09 [1] Bioconductor\n crayon           1.5.1         2022-03-26 [1] CRAN (R 4.2.0)\n devtools         2.4.4.9000    2022-09-23 [1] Github (r-lib/devtools@9e2793a)\n digest           0.6.29        2021-12-01 [1] CRAN (R 4.2.0)\n doParallel       1.0.17        2022-02-07 [1] CRAN (R 4.2.0)\n dplyr          * 1.0.99.9000   2022-09-23 [1] Github (tidyverse/dplyr@19c2be3)\n ellipsis         0.3.2         2021-04-29 [1] CRAN (R 4.2.0)\n evaluate         0.16          2022-08-09 [1] CRAN (R 4.2.1)\n extrafont      * 0.18          2022-04-12 [1] CRAN (R 4.2.0)\n extrafontdb      1.0           2012-06-11 [1] CRAN (R 4.2.0)\n fansi            1.0.3         2022-03-24 [1] CRAN (R 4.2.0)\n farver           2.1.1         2022-07-06 [1] CRAN (R 4.2.1)\n fastmap          1.1.0         2021-01-25 [1] CRAN (R 4.2.0)\n forcats        * 0.5.2.9000    2022-08-20 [1] Github (tidyverse/forcats@bd319e0)\n foreach          1.5.2         2022-02-02 [1] CRAN (R 4.2.0)\n fs               1.5.2.9000    2022-08-24 [1] Github (r-lib/fs@238032f)\n generics         0.1.3         2022-07-05 [1] CRAN (R 4.2.1)\n GetoptLong       1.0.5         2020-12-15 [1] CRAN (R 4.2.0)\n ggplot2        * 3.3.6.9000    2022-09-12 [1] Github (tidyverse/ggplot2@a58b48c)\n ggrepel          0.9.1         2021-01-15 [1] CRAN (R 4.2.0)\n GlobalOptions    0.1.2         2020-06-10 [1] CRAN (R 4.2.0)\n glue             1.6.2.9000    2022-04-22 [1] Github (tidyverse/glue@d47d6c7)\n gt               0.7.0.9000    2022-09-23 [1] Github (rstudio/gt@4030fb7)\n gtable           0.3.1.9000    2022-09-01 [1] Github (r-lib/gtable@c1a7a81)\n highr            0.9           2021-04-16 [1] CRAN (R 4.2.0)\n hms              1.1.2         2022-08-19 [1] CRAN (R 4.2.1)\n htmltools        0.5.3         2022-07-18 [1] CRAN (R 4.2.1)\n htmlwidgets      1.5.4         2022-08-23 [1] Github (ramnathv/htmlwidgets@400cf1a)\n httpuv           1.6.6         2022-09-08 [1] CRAN (R 4.2.1)\n IRanges          2.30.1        2022-08-18 [1] Bioconductor\n iterators        1.0.14        2022-02-05 [1] CRAN (R 4.2.0)\n jsonlite         1.8.0         2022-02-22 [1] CRAN (R 4.2.0)\n knitr            1.40          2022-08-24 [1] CRAN (R 4.2.1)\n labeling         0.4.2         2020-10-20 [1] CRAN (R 4.2.0)\n later            1.3.0         2021-08-18 [1] CRAN (R 4.2.0)\n lattice          0.20-45       2021-09-22 [2] CRAN (R 4.2.1)\n lifecycle        1.0.2.9000    2022-09-23 [1] Github (r-lib/lifecycle@0a6860a)\n lubridate      * 1.8.0.9000    2022-05-24 [1] Github (tidyverse/lubridate@0bb49b2)\n magick           2.7.3         2021-08-18 [1] CRAN (R 4.2.0)\n magrittr         2.0.3         2022-03-30 [1] CRAN (R 4.2.0)\n MASS             7.3-58.1      2022-08-03 [2] CRAN (R 4.2.1)\n Matrix         * 1.5-1         2022-09-13 [1] CRAN (R 4.2.1)\n matrixStats      0.62.0        2022-04-19 [1] CRAN (R 4.2.0)\n memoise          2.0.1         2021-11-26 [1] CRAN (R 4.2.0)\n mime             0.12          2021-09-28 [1] CRAN (R 4.2.0)\n miniUI           0.1.1.1       2018-05-18 [1] CRAN (R 4.2.0)\n munsell          0.5.0         2018-06-12 [1] CRAN (R 4.2.0)\n patchwork      * 1.1.2.9000    2022-08-20 [1] Github (thomasp85/patchwork@c14c960)\n pillar           1.8.1         2022-08-19 [1] CRAN (R 4.2.1)\n pkgbuild         1.3.1         2021-12-20 [1] CRAN (R 4.2.0)\n pkgconfig        2.0.3         2019-09-22 [1] CRAN (R 4.2.0)\n pkgload          1.3.0         2022-06-27 [1] CRAN (R 4.2.1)\n png              0.1-7         2013-12-03 [1] CRAN (R 4.2.0)\n prettyunits      1.1.1.9000    2022-04-22 [1] Github (r-lib/prettyunits@8706d89)\n processx         3.7.0         2022-07-07 [1] CRAN (R 4.2.1)\n profvis          0.3.7         2020-11-02 [1] CRAN (R 4.2.0)\n promises         1.2.0.1       2021-02-11 [1] CRAN (R 4.2.0)\n ps               1.7.1         2022-06-18 [1] CRAN (R 4.2.0)\n purrr          * 0.9000.0.9000 2022-09-24 [1] Github (tidyverse/purrr@4ab13f5)\n R.cache          0.16.0        2022-07-21 [1] CRAN (R 4.2.1)\n R.methodsS3      1.8.2         2022-06-13 [1] CRAN (R 4.2.0)\n R.oo             1.25.0        2022-06-12 [1] CRAN (R 4.2.0)\n R.utils          2.12.0        2022-06-28 [1] CRAN (R 4.2.1)\n R6               2.5.1.9000    2022-08-04 [1] Github (r-lib/R6@87d5e45)\n ragg             1.2.2.9000    2022-09-12 [1] Github (r-lib/ragg@904e145)\n RColorBrewer     1.1-3         2022-04-03 [1] CRAN (R 4.2.0)\n Rcpp             1.0.9         2022-07-08 [1] CRAN (R 4.2.1)\n readr          * 2.1.2.9000    2022-09-20 [1] Github (tidyverse/readr@5cac6ed)\n readxl           1.4.1.9000    2022-09-15 [1] Github (tidyverse/readxl@1835c96)\n remotes          2.4.2         2022-09-12 [1] Github (r-lib/remotes@bc0949d)\n reticulate       1.26          2022-08-31 [1] CRAN (R 4.2.1)\n rjson            0.2.21        2022-01-09 [1] CRAN (R 4.2.0)\n rlang            1.0.6         2022-09-24 [1] Github (r-lib/rlang@66454bd)\n rmarkdown        2.16.1        2022-09-24 [1] Github (rstudio/rmarkdown@9577707)\n Rttf2pt1         1.3.10        2022-02-07 [1] CRAN (R 4.2.0)\n S4Vectors        0.34.0        2022-04-26 [1] Bioconductor\n sass             0.4.2         2022-07-16 [1] CRAN (R 4.2.1)\n scales           1.2.1.9000    2022-08-20 [1] Github (r-lib/scales@b3df2fb)\n sessioninfo      1.2.2         2021-12-06 [1] CRAN (R 4.2.0)\n shape            1.4.6         2021-05-19 [1] CRAN (R 4.2.0)\n shiny            1.7.2         2022-07-19 [1] CRAN (R 4.2.1)\n stringi          1.7.8         2022-07-11 [1] CRAN (R 4.2.1)\n stringr        * 1.4.1.9000    2022-08-21 [1] Github (tidyverse/stringr@792bc92)\n styler         * 1.7.0.9002    2022-09-21 [1] Github (r-lib/styler@1f4437b)\n systemfonts      1.0.4         2022-02-11 [1] CRAN (R 4.2.0)\n textshaping      0.3.6         2021-10-13 [1] CRAN (R 4.2.0)\n tibble         * 3.1.8.9002    2022-09-24 [1] Github (tidyverse/tibble@e9db4f4)\n tidyr          * 1.2.1.9000    2022-09-09 [1] Github (tidyverse/tidyr@653def2)\n tidyselect       1.1.2.9000    2022-09-21 [1] Github (r-lib/tidyselect@edd0a3b)\n tidyverse      * 1.3.2.9000    2022-09-12 [1] Github (tidyverse/tidyverse@3be8283)\n tzdb             0.3.0         2022-03-28 [1] CRAN (R 4.2.0)\n urlchecker       1.0.1         2021-11-30 [1] CRAN (R 4.2.0)\n usethis          2.1.6.9000    2022-09-23 [1] Github (r-lib/usethis@8ecb7ab)\n utf8             1.2.2         2021-07-24 [1] CRAN (R 4.2.0)\n vctrs            0.4.1.9000    2022-09-19 [1] Github (r-lib/vctrs@0a219ba)\n vroom            1.5.7.9000    2022-09-09 [1] Github (r-lib/vroom@0c2423e)\n wesanderson      0.3.6.9000    2022-04-22 [1] Github (karthik/wesanderson@2796b59)\n withr            2.5.0         2022-03-03 [1] CRAN (R 4.2.0)\n xfun             0.33          2022-09-12 [1] CRAN (R 4.2.1)\n xtable           1.8-4         2019-04-21 [1] CRAN (R 4.2.0)\n yaml             2.3.5         2022-02-21 [1] CRAN (R 4.2.0)\n\n [1] /opt/homebrew/lib/R/4.2/site-library\n [2] /opt/homebrew/Cellar/r/4.2.1_4/lib/R/library\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         /Users/jialei/.pyenv/shims/python\n libpython:      /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/libpython3.9.dylib\n pythonhome:     /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10:/Users/jialei/.pyenv/versions/mambaforge-4.10.3-10\n version:        3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:00:33)  [Clang 13.0.1 ]\n numpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n numpy_version:  1.22.4\n numpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n \n NOTE: Python version was forced by RETICULATE_PYTHON\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "preprocess_matrices.html#parameters",
    "href": "preprocess_matrices.html#parameters",
    "title": "Data Preprocessing",
    "section": "Parameters",
    "text": "Parameters\n\nPROJECT_DIR = \"/Users/jialei/Dropbox/Data/Projects/UTSW/Human_blastoid\"\nPROJECT_DIR = Path(PROJECT_DIR)"
  },
  {
    "objectID": "preprocess_matrices.html#preprocessing",
    "href": "preprocess_matrices.html#preprocessing",
    "title": "Data Preprocessing",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nPart 1\n\nbatches = [\"LW36\", \"LW58\", \"LW59\", \"LW60\", \"LW61\"]\n\nscrublet_files = [\n    \"cells_singlet_log_0.235_9129_637.txt\",\n    \"cells_singlet_log_0.162_5628_874.txt\",\n    \"cells_singlet_log_0.174_5494_626.txt\",\n    \"cells_singlet_log_0.196_5512_189.txt\",\n    \"cells_singlet_log_0.195_6611_707.txt\"\n]\n\nmt_ratio = dict()\n\nfor i, j in zip(batches, scrublet_files):\n    print(i, j)\n\n    m = read_10x_matrix(\n        data_directory=PROJECT_DIR / \"raw\" / i / \"filtered_feature_bc_matrix\",\n        cell_id_prefix=i,\n        features_selected=\"Gene Expression\",\n    )\n\n    cells_included = [\n        i + \"_\" + ii.rstrip().replace(\"-1\", \"\")\n        for ii in open(file=PROJECT_DIR / \"raw\" / i / \"scrublet\" / j, mode=\"r\")\n    ]\n\n    adata = ad.AnnData(\n        X=m[\"matrix\"].T,\n        obs=pd.DataFrame(m[\"barcodes\"], index=m[\"barcodes\"], columns=[\"cell\"]),\n        var=pd.DataFrame(\n            m[\"features\"], index=m[\"features\"], columns=[\"features\"]\n        ),\n        dtype=np.int64,\n    )\n\n    adata = adata[cells_included, :]\n    mt_ratio[i] = calc_mt_percentage(adata.X.T, adata.var.index)\n\n    del m\n    del adata\n\nLW36 cells_singlet_log_0.235_9129_637.txt\n\n\nLW58 cells_singlet_log_0.162_5628_874.txt\n\n\nLW59 cells_singlet_log_0.174_5494_626.txt\n\n\nLW60 cells_singlet_log_0.196_5512_189.txt\n\n\nLW61 cells_singlet_log_0.195_6611_707.txt\n\n\n\nfor i in mt_ratio:\n    print(i)\n\n    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(4 * 1, 3 * 1))\n    plot_barplot_mt_distribution(x=mt_ratio[i], ax=ax)\n\n    plt.tight_layout()\n    plt.show()\n\n    plt.close(fig=fig)\n\n\n\nLW36\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nLW58\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nLW59\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nLW60\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nLW61\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nPart 2\n\nbatches = [\"LW49\", \"LW50\", \"LW51\", \"LW52\"]\n\n\nadatas = list()\n\nfor i in batches:\n    print(i)\n\n    m = read_10x_matrix(\n        data_directory=PROJECT_DIR / \"raw\" / i / \"filtered_feature_bc_matrix\",\n        cell_id_prefix=i,\n        features_selected=\"Gene Expression\",\n    )\n\n    adata = ad.AnnData(\n        X=m[\"matrix\"].T,\n        obs=pd.DataFrame(m[\"barcodes\"], index=m[\"barcodes\"], columns=[\"cell\"]),\n        var=pd.DataFrame(\n            m[\"features\"], index=m[\"features\"], columns=[\"features\"]\n        ),\n        dtype=np.int64,\n    )\n\n    adatas.append(adata)\n\n    del m\n    del adata\n\nLW49\n\n\nLW50\n\n\nLW51\n\n\nLW52\n\n\n\ncells_included = [\n    i.rstrip() for i in\n    open(PROJECT_DIR\n    / \"raw\"\n    / \"feeder_cell_detection\"\n    / \"filtered_feature_bc_matrix_scrublet\"\n    / \"clustering\"\n    / \"LW49_LW50_LW51_LW52/cells_included.txt\")\n]\n\n\nadata = ad.concat(adatas)\nadata = adata[cells_included, :]\nadata\n\nView of AnnData object with n_obs × n_vars = 10842 × 33538\n    obs: 'cell'\n\n\n\nmt_ratio = calc_mt_percentage(adata.X.T, adata.var.index)\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(4 * 1, 3 * 1))\nplot_barplot_mt_distribution(x=mt_ratio, ax=ax)\n\nplt.tight_layout()\nplt.show()\n\nplt.close(fig=fig)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blastocyst-Like Structures Generated From Human Pluripotent Stem Cells",
    "section": "",
    "text": "Schematic Summary\n\n\nHuman blastoid formation from naive human PSCs and their potential applications\n\n\n\n\n\n\n Citation\n\nLeqian Yu#, Yulei Wei#, Jialei Duan#, Daniel A. Schmitz, Masahiro Sakurai, Lei Wang, Kunhua Wang, Shuhua Zhao, Gary C. Hon*, Jun Wu* (2021). Blastocyst-like structures generated from human pluripotent stem cells. Nature 591, 620–626. DOI: 10.1038/s41586-021-03356-y"
  },
  {
    "objectID": "miscellaneous.html",
    "href": "miscellaneous.html",
    "title": "Miscellaneous",
    "section": "",
    "text": "from datetime import datetime\ndatetime.today().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n'2022-09-25 00:38:50'\n\n\n\nIn this manuscript, several transcriptome data sets generated by different technologies were included. To minimize platform and processing differences, raw fastq files of public datasets using the Illumina sequencing platform were downloaded and re-processed.\n\nCinkornpumin, J.K., Kwon, S.Y., Guo, Y., Hossain, I., Sirois, J., Russett, C.S., Tseng, H.-W., Okae, H., Arima, T., Duchaine, T.F., et al. (2020). Naive human embryonic stem cells can give rise to cells with a trophoblast-like transcriptome and methylome. Stem Cell Reports 15, 198–213.\nDong, C., Beltcheva, M., Gontarz, P., Zhang, B., Popli, P., Fischer, L.A., Khan, S.A., Park, K.-M., Yoon, E.-J., Xing, X., et al. (2020). Derivation of trophoblast stem cells from naïve human pluripotent stem cells. Elife 9.\nLinneberg-Agerholm, M., Wong, Y.F., Romero Herrera, J.A., Monteiro, R.S., Anderson, K.G.V., and Brickman, J.M. (2019). Naïve human pluripotent stem cells respond to Wnt, Nodal and LIF signalling to produce expandable naïve extra-embryonic endoderm. Development 146.\nLv, B., An, Q., Zeng, Q., Zhang, X., Lu, P., Wang, Y., Zhu, X., Ji, Y., Fan, G., and Xue, Z. (2019). Single-cell RNA sequencing reveals regulatory mechanism for trophoblast cell-fate divergence in human peri-implantation conceptuses. PLoS Biol. 17, e3000187.\nNakamura, T., Okamoto, I., Sasaki, K., Yabuta, Y., Iwatani, C., Tsuchiya, H., Seita, Y., Nakamura, S., Yamamoto, T., and Saitou, M. (2016). A developmental coordinate of pluripotency among mice, monkeys and humans. Nature 537, 57–62.\nPetropoulos, S., Edsgärd, D., Reinius, B., Deng, Q., Panula, S.P., Codeluppi, S., Plaza Reyes, A., Linnarsson, S., Sandberg, R., and Lanner, F. (2016). Single-cell RNA-Seq reveals lineage and X chromosome dynamics in human preimplantation embryos. Cell 165, 1012–1026.\nTakashima, Y., Guo, G., Loos, R., Nichols, J., Ficz, G., Krueger, F., Oxley, D., Santos, F., Clarke, J., Mansfield, W., et al. (2014). Resetting transcription factor control circuitry toward ground-state pluripotency in human. Cell 158, 1254–1269.\nXiang, L., Yin, Y., Zheng, Y., Ma, Y., Li, Y., Zhao, Z., Guo, J., Ai, Z., Niu, Y., Duan, K., et al. (2020). A developmental landscape of 3D-cultured human pre-gastrulation embryos. Nature 577, 537–542.\nZhou, F., Wang, R., Yuan, P., Ren, Y., Mao, Y., Li, R., Lian, Y., Li, J., Wen, L., Yan, L., et al. (2019). Reconstituting the transcriptome and DNA methylome landscapes of human implantation. Nature 572, 660–664.\n\n\nRelated publications:\n\nYanagida, A., Spindlow, D., Nichols, J., Dattani, A., Smith, A., and Guo, G. (2021). Naive stem cell blastocyst model captures human embryo lineage segregation. Cell Stem Cell 28, 1016–1022.e4.\nFan, Y., Min, Z., Alsolami, S., Ma, Z., Zhang, E., Chen, W., Zhong, K., Pei, W., Kang, X., Zhang, P., et al. (2021). Generation of human blastocyst-like structures from pluripotent stem cells. Cell Discov 7, 81.\nSozen, B., Jorgensen, V., Weatherbee, B.A.T., Chen, S., Zhu, M., and Zernicka-Goetz, M. (2021). Reconstructing aspects of human embryogenesis with pluripotent stem cells. Nat. Commun. 12, 5550.\nKagawa, H., Javali, A., Khoei, H.H., Sommer, T.M., Sestini, G., Novatchkova, M., Scholte Op Reimer, Y., Castel, G., Bruneau, A., Maenhoudt, N., et al. (2021). Human blastoids model blastocyst development and implantation. Nature 1–9.\n\n\n\n\n\nCitationBibTeX citation:@article{yu,\n  author = {Leqian Yu and Yulei Wei and Jialei Duan and Daniel A.\n    Schmitz and Masahiro Sakurai and Lei Wang and Kunhua Wang and Shuhua\n    Zhao and Gary C. Hon and Jun Wu},\n  editor = {},\n  publisher = {Nature Publishing Group},\n  title = {Blastocyst-Like Structures Generated from Human Pluripotent\n    Stem Cells},\n  journal = {Nature},\n  volume = {591},\n  number = {7851},\n  pages = {620 - 626},\n  date = {},\n  url = {https://doi.org/10.1038/s41586-021-03356-y},\n  doi = {10.1038/s41586-021-03356-y},\n  langid = {en},\n  abstract = {Human blastoids provide a readily accessible, scalable,\n    versatile and perturbable alternative to blastocysts for studying\n    early human development, understanding early pregnancy loss and\n    gaining insights into early developmental defects.}\n}\nFor attribution, please cite this work as:\nLeqian Yu, Yulei Wei, Jialei Duan, Daniel A. Schmitz, Masahiro Sakurai,\nLei Wang, Kunhua Wang, Shuhua Zhao, Gary C. Hon, and Jun Wu. n.d.\n“Blastocyst-Like Structures Generated from Human Pluripotent Stem\nCells.” Nature 591 (7851): 620–26. https://doi.org/10.1038/s41586-021-03356-y."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "from datetime import datetime\ndatetime.today().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n'2022-09-25 00:38:52'"
  },
  {
    "objectID": "cluster_blastoids.html#parameters",
    "href": "cluster_blastoids.html#parameters",
    "title": "Clustering of Human Blastoid Cells",
    "section": "Parameters",
    "text": "Parameters\n\nPROJECT_DIR = Path(\"/Users/jialei/Dropbox/Data/Projects/UTSW/Human_blastoid\")\n\nSEED = 20200416\nN_COMPONENTS = 50\nN_COMPONENTS_SELECTED = 24\n\nMIN_GENES_THRESHOLD = 200\nMINIMAL_NUM_CELLS_REQUIRED_FOR_GENE = 30\nMINIMAL_NUM_COUNTS_REQUIRED_FOR_GENE = 60\n\nN_THREADS = 4"
  },
  {
    "objectID": "cluster_blastoids.html#data-preparation",
    "href": "cluster_blastoids.html#data-preparation",
    "title": "Clustering of Human Blastoid Cells",
    "section": "Data preparation",
    "text": "Data preparation\n\nData loading\n\nDATA_DIR = PROJECT_DIR / \"github/data/matrices\" / \"LW60_LW61\"\n\nmatrix_readcount_p3 = scipy.sparse.load_npz(\n    file=DATA_DIR / \"matrix_readcount.npz\"\n)\n\nmatrix_readcount_p3_barcodes = np.load(\n    file=DATA_DIR / \"matrix_readcount_barcodes.npy\"\n)\n\nmatrix_readcount_p3_features = np.load(\n    file=DATA_DIR / \"matrix_readcount_features.npy\"\n)\n\ncells_included = [\n    i.rstrip() for i in open(file=DATA_DIR / \"cells_passed_mt_filtering.txt\")\n]\n(_,) = np.where(\n    [i.rstrip().startswith((\"LW60\", \"LW61\")) for i in cells_included]\n)\ncells_included = np.array(cells_included)[_]\n(cells_included_idx,) = np.where(\n    np.isin(element=matrix_readcount_p3_barcodes, test_elements=cells_included)\n)\n\nmatrix_readcount_p3_barcodes = matrix_readcount_p3_barcodes[cells_included_idx]\nmatrix_readcount_p3 = matrix_readcount_p3[:, cells_included_idx]\n\n\nDATA_DIR = PROJECT_DIR / \"raw/public\" / \"PRJEB11202/reformatted_matrix\"\n\nmatrix_readcount_p4 = scipy.sparse.load_npz(\n    file=DATA_DIR / \"matrix_readcount.npz\"\n)\n\nmatrix_readcount_p4_barcodes = np.load(\n    file=DATA_DIR / \"matrix_readcount_barcodes.npy\"\n)\n\nmatrix_readcount_p4_features = np.load(\n    file=DATA_DIR / \"matrix_readcount_features.npy\"\n)\n\n\n# merge\nmatrix_readcount_use = scipy.sparse.hstack(\n    blocks=(\n        matrix_readcount_p3,\n        matrix_readcount_p4,\n    ),\n    format=None,\n    dtype=np.int_,\n).tocsc()\n\nmatrix_readcount_use_barcodes = np.concatenate(\n    (\n        matrix_readcount_p3_barcodes,\n        matrix_readcount_p4_barcodes,\n    ),\n    axis=0,\n)\n\nassert len(matrix_readcount_p3_features) == len(matrix_readcount_p4_features)\nmatrix_readcount_use_features = matrix_readcount_p3_features\n\nmatrix_readcount_use = matrix_readcount_use[\n    :, np.argsort(a=matrix_readcount_use_barcodes)\n]\nmatrix_readcount_use_barcodes = matrix_readcount_use_barcodes[\n    np.argsort(a=matrix_readcount_use_barcodes)\n]\n\n\nfeatures = matrix_readcount_use_features\n\n\n\nPreprocessing\n\nmatrix_readcount_norm = matrix_readcount_use.copy()\n\n\nprint(\n    \"Raw median UMIs per cell:\",\n    f\"{np.median(a=matrix_readcount_use.sum(axis=0).A1)}\",\n)\nprint(f\"Number of cells before filtering: {matrix_readcount_norm.shape[1]}\")\nprint(\n    \"Number of features before filtering: \", f\"{matrix_readcount_norm.shape[0]}\"\n)\n\nRaw median UMIs per cell: 11410.0\nNumber of cells before filtering: 11182\nNumber of features before filtering:  33538\n\n\n\n# filter cells\n(col_idx,) = np.where(\n    (matrix_readcount_norm > 0).sum(axis=0).A1 >= MIN_GENES_THRESHOLD\n)\nmatrix_readcount_norm = matrix_readcount_norm[:, col_idx]\nmatrix_readcount_norm_barcodes = matrix_readcount_use_barcodes[col_idx]\nprint(\n    \"Number of cells after filtering: \",\n    f\"{len(matrix_readcount_norm_barcodes)}\",\n)\n\nNumber of cells after filtering:  11182\n\n\n\n# filter features\nrow_idx = np.logical_and(\n    (matrix_readcount_norm > 0).sum(axis=1).A1\n    >= MINIMAL_NUM_CELLS_REQUIRED_FOR_GENE,\n    (matrix_readcount_norm).sum(axis=1).A1\n    >= MINIMAL_NUM_COUNTS_REQUIRED_FOR_GENE,\n)\n\nmatrix_readcount_norm = matrix_readcount_norm[row_idx, :]\nmatrix_readcount_norm_features = matrix_readcount_use_features[row_idx]\n\nprint(\n    \"Number of features after filtering: \",\n    f\"{len(matrix_readcount_norm_features)}\",\n)\nprint(\n    \"After filtering, median UMIs per cell is\",\n    f\"{np.median(a=matrix_readcount_norm.sum(axis=0).A1)}\",\n)\n\nNumber of features after filtering:  23617\nAfter filtering, median UMIs per cell is 11409.0\n\n\n\n# normalize\nmatrix_readcount_norm.data = (\n    np.median(a=matrix_readcount_norm.sum(axis=0).A1)\n    * matrix_readcount_norm.data\n    / np.repeat(\n        matrix_readcount_norm.sum(axis=0).A1,\n        np.diff(matrix_readcount_norm.indptr),\n    )\n)"
  },
  {
    "objectID": "cluster_blastoids.html#dimensionality-reduction",
    "href": "cluster_blastoids.html#dimensionality-reduction",
    "title": "Clustering of Human Blastoid Cells",
    "section": "Dimensionality reduction",
    "text": "Dimensionality reduction\n\nbatches = [re.sub(\"_[A-Z]{16}$\", \"\", i)\n           for i in matrix_readcount_norm_barcodes]\n\n(_,) = np.where([i.rstrip().startswith((\"ER\",)) for i in batches])\n\nbatches = np.array(batches)\nbatches[_] = \"PRJEB11202\"\n\nprint(sorted(set(batches)))\n\n['LW60', 'LW61', 'PRJEB11202']\n\n\n\n# create anndata object, logarithmized\nadata = sc.AnnData(\n    X=np.log1p(matrix_readcount_norm.T),\n    obs={\n        \"cell\": matrix_readcount_norm_barcodes,\n        \"batch\": batches,\n    },\n    var={\"feature\": matrix_readcount_norm_features},\n    dtype=np.int64\n)\nadata.obs.index = adata.obs[\"cell\"]\nadata.var.index = adata.var[\"feature\"]\n\nadata.var[\"symbol\"] = [\n    re.sub(\"^E[A-Z]{1,}[0-9]{11}_\", \"\", i) for i in adata.var[\"feature\"]\n]\n\n\nadata.obs[\"num_umis\"] = matrix_readcount_use.sum(axis=0).A1\nadata.obs[\"num_features\"] = (adata.X > 0).sum(axis=1).A1\n(_,) = np.where([i.startswith(\"MT-\") for i in adata.var.symbol])\nadata.obs[\"num_umis_mt\"] = matrix_readcount_use[_, :].sum(axis=0).A1\n\nadata.obs.head()\n\n\n\n\n\n  \n    \n      \n      cell\n      batch\n      num_umis\n      num_features\n      num_umis_mt\n    \n    \n      cell\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      ERS1079290\n      ERS1079290\n      PRJEB11202\n      1884175\n      2022\n      1906\n    \n    \n      ERS1079291\n      ERS1079291\n      PRJEB11202\n      1290557\n      1942\n      1226\n    \n    \n      ERS1079292\n      ERS1079292\n      PRJEB11202\n      1686855\n      1993\n      2271\n    \n    \n      ERS1079293\n      ERS1079293\n      PRJEB11202\n      1181562\n      1973\n      1529\n    \n    \n      ERS1079294\n      ERS1079294\n      PRJEB11202\n      1868361\n      1983\n      1893\n    \n  \n\n\n\n\n\n# standardize\nsc.pp.scale(adata, zero_center=True, max_value=None, copy=False)\n\n\nPCA\n\npca = PCA(\n    n_components=N_COMPONENTS,\n    copy=True,\n    whiten=False,\n    svd_solver=\"arpack\",\n    tol=0.0,\n    iterated_power=\"auto\",\n    random_state=SEED,\n)\nprincipal_components = pca.fit_transform(adata.X)\n\n\nwith sns.axes_style(\"darkgrid\"):\n    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6, 2.5))\n\n    plot_pca_variance_explained(\n        x=pca.explained_variance_ratio_,\n        num_pcs=min(40, N_COMPONENTS),\n        ax=ax\n    )\n\n    ax.set(ylim=(-0.0025, max(ax.get_ylim())))\n\n    plt.tight_layout()\n    plt.show()\n\n    plt.close(fig=fig)\n\n\n\n\n\nN_COMPONENTS_CORR = min(40, N_COMPONENTS)\n\ncorr_pearsonr = [\n    scipy.stats.pearsonr(\n        x=principal_components[:, i],\n        y=np.log1p(matrix_readcount_use[:, col_idx].sum(axis=0).A1),\n    )[0]\n    for i in range(N_COMPONENTS_CORR)\n]\n\ncorr_pearsonr = pd.DataFrame(data=corr_pearsonr, columns=[\"corr\"])\n\n(_,) = np.where([np.sqrt(i**2) <= 0.9 for i in corr_pearsonr[\"corr\"]])\nprincipal_components = principal_components[:, _]\n\n\n\nBatch effect removal\n\nbatches = adata.obs[\"batch\"].values\npd.Series(batches).value_counts()\n\nLW61          5156\nLW60          4497\nPRJEB11202    1529\ndtype: int64\n\n\n\nho = hm.run_harmony(\n    data_mat=principal_components,\n    meta_data=pd.DataFrame(\n        {\"batch\": batches}, index=matrix_readcount_norm_barcodes\n    ),\n    vars_use=\"batch\",\n    random_state=SEED,\n)\n\nprincipal_components_corrected = ho.Z_corr.T\n\n2022-09-25 00:39:23,807 - harmonypy - INFO - Iteration 1 of 10\n\n\nINFO:harmonypy:Iteration 1 of 10\n\n\n2022-09-25 00:39:24,829 - harmonypy - INFO - Iteration 2 of 10\n\n\nINFO:harmonypy:Iteration 2 of 10\n\n\n2022-09-25 00:39:25,821 - harmonypy - INFO - Iteration 3 of 10\n\n\nINFO:harmonypy:Iteration 3 of 10\n\n\n2022-09-25 00:39:26,813 - harmonypy - INFO - Iteration 4 of 10\n\n\nINFO:harmonypy:Iteration 4 of 10\n\n\n2022-09-25 00:39:27,906 - harmonypy - INFO - Iteration 5 of 10\n\n\nINFO:harmonypy:Iteration 5 of 10\n\n\n2022-09-25 00:39:28,975 - harmonypy - INFO - Converged after 5 iterations\n\n\nINFO:harmonypy:Converged after 5 iterations\n\n\n\nprincipal_components_use = principal_components_corrected[\n    :, range(N_COMPONENTS_SELECTED)\n]\n\n\n\nFIt-SNE\n\nembedding_initialization = umap.UMAP(\n    n_neighbors=10,\n    n_components=N_COMPONENTS,\n    metric=\"euclidean\",\n    min_dist=0.1,\n    spread=1.0,\n    random_state=SEED,\n    transform_seed=42,\n    verbose=True,\n).fit_transform(principal_components_use)\n\nembedding_fitsne = fast_tsne(\n    X=principal_components_use,\n    theta=0.5,\n    perplexity=30,\n    max_iter=2000,\n    map_dims=2,\n    seed=SEED,\n    initialization=embedding_initialization,\n    df=1.0,\n    nthreads=N_THREADS,\n)\n\nUMAP(n_components=50, n_neighbors=10, random_state=20200416, verbose=True)\nSun Sep 25 00:39:28 2022 Construct fuzzy simplicial set\nSun Sep 25 00:39:28 2022 Finding Nearest Neighbors\nSun Sep 25 00:39:28 2022 Building RP forest with 10 trees\nSun Sep 25 00:39:29 2022 NN descent for 13 iterations\n\n\n     1  /  13\n     2  /  13\n     3  /  13\n     4  /  13\n    Stopping threshold met -- exiting after 4 iterations\nSun Sep 25 00:39:34 2022 Finished Nearest Neighbor Search\n\n\nSun Sep 25 00:39:35 2022 Construct embedding\n\n\n\n\n\nSun Sep 25 00:39:46 2022 Finished embedding\n=============== t-SNE v1.2.1 ===============\nfast_tsne data_path: data_2022-09-25 00:39:46.210393-461890592.dat\nfast_tsne result_path: result_2022-09-25 00:39:46.210393-461890592.dat\nfast_tsne nthreads: 4\n\n\nRead the following parameters:\n     n 11182 by d 24 dataset, theta 0.500000,\n     perplexity 30.000000, no_dims 2, max_iter 2000,\n     stop_lying_iter 250, mom_switch_iter 250,\n     momentum 0.500000, final_momentum 0.800000,\n     learning_rate 931.833333, max_step_norm 5.000000,\n     K -1, sigma -1.000000, nbody_algo 2,\n     knn_algo 1, early_exag_coeff 12.000000,\n     no_momentum_during_exag 0, n_trees 50, search_k 4500,\n     start_late_exag_iter -1, late_exag_coeff -1.000000\n     nterms 3, interval_per_integer 1.000000, min_num_intervals 50, t-dist df 1.000000\nRead the 11182 x 24 data matrix successfully. X[0,0] = 26.709492\nRead the initialization successfully.\nWill use momentum during exaggeration phase\nComputing input similarities...\nUsing perplexity, so normalizing input data (to prevent numerical problems)\nUsing perplexity, not the manually set kernel width.  K (number of nearest neighbors) and sigma (bandwidth) parameters are going to be ignored.\nUsing ANNOY for knn search, with parameters: n_trees 50 and search_k 4500\nGoing to allocate memory. N: 11182, K: 90, N*K = 1006380\nBuilding Annoy tree...\nDone building tree. Beginning nearest neighbor search... \nparallel (4 threads):\n[>                                                           ] 0% 0s[==>                                                         ] 3% 0.02s[====>                                                       ] 6% 0.039s[=====>                                                      ] 9% 0.059s[========>                                                   ] 13% 0.079s[==========>                                                 ] 16% 0.099s[============>                                               ] 20% 0.12s[==============>                                             ] 23% 0.139s[================>                                           ] 27% 0.16s[==================>                                         ] 30% 0.18s[====================>                                       ] 34% 0.2s\n\n\n[======================>                                     ] 37% 0.221s[========================>                                   ] 40% 0.247s[==========================>                                 ] 44% 0.288s[============================>                               ] 46% 0.317s[==============================>                             ] 50% 0.344s[================================>                           ] 54% 0.367s[==================================>                         ] 57% 0.39s[====================================>                       ] 61% 0.412s\n\n\n[======================================>                     ] 64% 0.434s[========================================>                   ] 68% 0.457s[===========================================>                ] 71% 0.479s[=============================================>              ] 75% 0.505s[===============================================>            ] 79% 0.529s[=================================================>          ] 82% 0.551s[===================================================>        ] 86% 0.573s[=====================================================>      ] 89% 0.595s[========================================================>   ] 93% 0.617s\n\n\n[===========================================================>] 99% 0.678s\n\n\n\nSymmetrizing...\nUsing the given initialization.\nExaggerating Ps by 12.000000\nInput similarities computed (sparsity = 0.011212)!\nLearning embedding...\nUsing FIt-SNE approximation.\nIteration 50 (50 iterations in 0.30 seconds), cost 4.177073\nIteration 100 (50 iterations in 0.29 seconds), cost 3.838677\nIteration 150 (50 iterations in 0.29 seconds), cost 3.760842\nIteration 200 (50 iterations in 0.29 seconds), cost 3.711519\nIteration 250 (50 iterations in 0.28 seconds), cost 3.660229\nUnexaggerating Ps by 12.000000\nIteration 300 (50 iterations in 0.29 seconds), cost 2.568280\nIteration 350 (50 iterations in 0.29 seconds), cost 2.112301\nIteration 400 (50 iterations in 0.39 seconds), cost 1.896454\nIteration 450 (50 iterations in 0.61 seconds), cost 1.761024\nIteration 500 (50 iterations in 0.98 seconds), cost 1.677739\nIteration 550 (50 iterations in 1.16 seconds), cost 1.621737\nIteration 600 (50 iterations in 1.46 seconds), cost 1.570712\nIteration 650 (50 iterations in 1.70 seconds), cost 1.547129\nIteration 700 (50 iterations in 2.03 seconds), cost 1.516887\nIteration 750 (50 iterations in 2.28 seconds), cost 1.494418\nIteration 800 (50 iterations in 2.45 seconds), cost 1.484496\nIteration 850 (50 iterations in 3.67 seconds), cost 1.467900\nIteration 900 (50 iterations in 3.77 seconds), cost 1.465943\nIteration 950 (50 iterations in 3.77 seconds), cost 1.452035\nIteration 1000 (50 iterations in 3.75 seconds), cost 1.452934\nIteration 1050 (50 iterations in 4.10 seconds), cost 1.448212\nIteration 1100 (50 iterations in 4.69 seconds), cost 1.438053\nIteration 1150 (50 iterations in 4.58 seconds), cost 1.433305\nIteration 1200 (50 iterations in 4.71 seconds), cost 1.424563\nIteration 1250 (50 iterations in 4.62 seconds), cost 1.427264\nIteration 1300 (50 iterations in 4.63 seconds), cost 1.442807\nIteration 1350 (50 iterations in 4.62 seconds), cost 1.413062\nIteration 1400 (50 iterations in 4.63 seconds), cost 1.418446\nIteration 1450 (50 iterations in 4.61 seconds), cost 1.403327\nIteration 1500 (50 iterations in 10.67 seconds), cost 1.410428\nIteration 1550 (50 iterations in 11.63 seconds), cost 1.404569\nIteration 1600 (50 iterations in 8.53 seconds), cost 1.412123\nIteration 1650 (50 iterations in 7.52 seconds), cost 1.407856\nIteration 1700 (50 iterations in 13.54 seconds), cost 1.409483\nIteration 1750 (50 iterations in 19.09 seconds), cost 1.404554\nIteration 1800 (50 iterations in 7.82 seconds), cost 1.400241\nIteration 1850 (50 iterations in 5.41 seconds), cost 1.403116\nIteration 1900 (50 iterations in 8.51 seconds), cost 1.400103\nIteration 1950 (50 iterations in 5.03 seconds), cost 1.398341\nIteration 2000 (50 iterations in 16.84 seconds), cost 1.392986\nWrote the 11182 x 2 data matrix successfully.\nDone.\n\n\n\n\n\nUMAP\n\nembedding_umap = umap.UMAP(\n    n_neighbors=20,\n    n_components=2,\n    metric=\"euclidean\",\n    n_epochs=None,\n    init=\"spectral\",\n    min_dist=0.1,\n    spread=1.0,\n    random_state=SEED,\n    transform_seed=42,\n    verbose=True,\n).fit_transform(principal_components_use)\n\nUMAP(n_neighbors=20, random_state=20200416, verbose=True)\nSun Sep 25 00:42:53 2022 Construct fuzzy simplicial set\nSun Sep 25 00:42:53 2022 Finding Nearest Neighbors\nSun Sep 25 00:42:53 2022 Building RP forest with 10 trees\nSun Sep 25 00:42:53 2022 NN descent for 13 iterations\n     1  /  13\n     2  /  13\n     3  /  13\n\n\n    Stopping threshold met -- exiting after 3 iterations\nSun Sep 25 00:42:53 2022 Finished Nearest Neighbor Search\n\n\nSun Sep 25 00:42:53 2022 Construct embedding\n\n\n\n\n\nSun Sep 25 00:42:59 2022 Finished embedding"
  },
  {
    "objectID": "cluster_blastoids.html#clustering",
    "href": "cluster_blastoids.html#clustering",
    "title": "Clustering of Human Blastoid Cells",
    "section": "Clustering",
    "text": "Clustering\n\nadata = sc.AnnData(\n    X=principal_components_use,\n    obs=adata.obs,\n)\n\n/var/folders/yr/vrcclyl91kd_dg97yrqtwqz40000gn/T/ipykernel_2849/1122007486.py:1: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.\n  adata = sc.AnnData(\n\n\n\nsc.pp.neighbors(\n    adata=adata,\n    n_neighbors=30,\n    n_pcs=0,\n    use_rep=None,\n    knn=True,\n    random_state=SEED,\n    method=\"umap\",\n    metric=\"euclidean\",\n    copy=False,\n)\n\n\nsc.tl.louvain(\n    adata=adata,\n    resolution=1,\n    random_state=SEED,\n    flavor=\"vtraag\",\n    directed=True,\n    use_weights=False,\n    partition_type=None,\n    copy=False,\n)\n\n\nembedding = pd.DataFrame(\n    data=np.concatenate(\n        (adata.obs[[\"batch\", \"louvain\"]], embedding_fitsne, embedding_umap),\n        axis=1,\n    ),\n    index=adata.obs[\"cell\"],\n    columns=[\"batch\", \"louvain\", \"x_fitsne\", \"y_fitsne\", \"x_umap\", \"y_umap\"],\n)"
  },
  {
    "objectID": "cluster_blastoids.html#visualization",
    "href": "cluster_blastoids.html#visualization",
    "title": "Clustering of Human Blastoid Cells",
    "section": "Visualization",
    "text": "Visualization\n\nCluster embedding\n\nfig, ax = plt.subplots(nrows=1 * 1, ncols=1 * 1, figsize=(4 * 1, 3 * 1))\n# axes = axes.flatten()\n\nplot_embedding(\n    embedding=embedding.loc[:, [\"x_umap\", \"y_umap\"]],\n    ax=ax,\n    color_values=[str(i) for i in embedding[\"louvain\"]],\n    title=\"UMAP; louvain\",\n    show_color_value_labels=True,\n    rasterise=True,\n)\n\nplt.tight_layout()\nplt.show()\n\nplt.close(fig=fig)\n\n\n\n \n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nCluster distribution\n\nembedding.groupby(by=\"batch\").size().to_frame(name=\"num_cells\")\n\n\n\n\n\n  \n    \n      \n      num_cells\n    \n    \n      batch\n      \n    \n  \n  \n    \n      LW60\n      4497\n    \n    \n      LW61\n      5156\n    \n    \n      PRJEB11202\n      1529\n    \n  \n\n\n\n\n\ncluster_composition = (\n    (\n        embedding.groupby(by=\"louvain\").aggregate(\"batch\").value_counts()\n        / embedding.groupby(by=\"louvain\").aggregate(\"batch\").size()\n    )\n    .to_frame(name=\"percentage\")\n    .reset_index()\n)\n\ncluster_composition = cluster_composition.astype({\"louvain\": str})\n\nclusters_selected = list(\n    np.sort(embedding[\"louvain\"].unique()).astype(dtype=str)[::-1]\n)\n\nbatches_selected = list(embedding[\"batch\"].unique())\n\ncluster_composition = cluster_composition.astype(\n    {\n        \"louvain\": pd.api.types.CategoricalDtype(\n            categories=clusters_selected, ordered=True\n        ),\n        \"batch\": pd.api.types.CategoricalDtype(\n            categories=batches_selected, ordered=True\n        ),\n    }\n)\n\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(4.5, 4))\n\nplot_cluster_composition(\n    cluster_composition=cluster_composition,\n    x=\"batch\",\n    y=\"louvain\",\n    ax=ax,\n    x_order=batches_selected,\n    y_order=clusters_selected,\n)\n\nplt.tight_layout()\nplt.show()\n\n/Users/jialei/Dropbox/Data/Projects/UTSW/Scripts/utilities/utilities.py:762: UserWarning: FixedFormatter should only be used together with FixedLocator\n  ax.set_xticklabels(labels=['{:.0%}'.format(i)\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n\nExpression\n\nmatrix_cpm_use = matrix_readcount_use.copy()\nmatrix_cpm_use.data = (\n    1_000_000\n    * matrix_cpm_use.data\n    / np.repeat(matrix_cpm_use.sum(axis=0).A1, np.diff(matrix_cpm_use.indptr))\n)\n\n\nFEATURES_SELECTED = [\n    \"ENSG00000181449_SOX2\",\n    \"ENSG00000156574_NODAL\",\n    \"ENSG00000111704_NANOG\",\n    \"ENSG00000147596_PRDM14\",\n    \"ENSG00000075388_FGF4\",\n    \"ENSG00000164736_SOX17\",\n    \"ENSG00000125798_FOXA2\",\n    \"ENSG00000136574_GATA4\",\n    \"ENSG00000141448_GATA6\",\n    \"ENSG00000115414_FN1\",\n    \"ENSG00000187498_COL4A1\",\n    \"ENSG00000179348_GATA2\",\n    \"ENSG00000107485_GATA3\",\n    \"ENSG00000118777_ABCG2\",\n    \"ENSG00000126353_CCR7\",\n    \"ENSG00000137869_CYP19A1\",\n    \"ENSG00000169550_MUC15\"\n]\n\n\nfor selected_feature in FEATURES_SELECTED:\n    # print(selected_feature)\n\n    idx = np.where([i == selected_feature for i in features])[0]\n    values = matrix_cpm_use[idx, :].toarray().flatten()\n    values = np.log10(values + 1)\n\n    fig, ax = plt.subplots(nrows=1 * 1, ncols=1, figsize=(4 * 1, 3 * 1))\n\n    p = plot_embedding(\n        embedding=embedding.loc[adata.obs.index, [\"x_umap\", \"y_umap\"]],\n        ax=ax,\n        color_values=values,\n        title=f\"UMAP; {selected_feature}\",\n        show_color_value_labels=False,\n        marker_size=6,\n        sort_values=True,\n    )\n\n    ax_ins = ax.inset_axes((0.06, 0.70, 0.03, 0.2))\n\n    cbar = fig.colorbar(\n        mappable=p,\n        cax=ax_ins,\n        orientation=\"vertical\",\n        label=\"\",\n        ticks=range(np.ceil(max(values)).astype(int)),\n    )\n\n    cbar.outline.set_linewidth(w=0.2)\n    cbar.outline.set_visible(b=False)\n\n    ax_ins.tick_params(\n        axis=\"y\",\n        direction=\"out\",\n        length=1.5,\n        width=0.2,\n        color=\"#333333\",\n        pad=1.25,\n        labelsize=6,\n        labelcolor=\"#4D4D4D\",\n    )\n\n    plt.tight_layout()\n    plt.show()\n\n    plt.close(fig=fig)"
  }
]